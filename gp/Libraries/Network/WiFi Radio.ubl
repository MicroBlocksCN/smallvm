module 'WiFi Radio' Comm
author MicroBlocks
version 1 3 
depends WiFi 
tags radio communication messaging network 
description 'This library supports easy message exchange among WiFi-enabled boards on the same network.

A message can contain a string, a number, or both. Messages are received by all boards in the same radio group as the sender.

This library is similar to the Radio library, but messages are sent via UDP over WiFi instead of the Nordic radio system. Since UDP supports larger packets, this library can send longer strings.

This library can only communicate with other boards that support WiFi; it cannot interoperate with Nordic-based boards like the micro:bit.
'
variables _wifiRadio_broadcastAddr _wifiRadio_group _wifiRadio_lastNumber _wifiRadio_lastString 

  spec ' ' 'wifiRadio_sendNumber' 'wifi send number _' 'num' 123
  spec ' ' 'wifiRadio_sendString' 'wifi send string _' 'str' 'Hello!'
  spec ' ' 'wifiRadio_sendPair' 'wifi send pair _ = _' 'str num' 'light' 10
  space
  spec 'r' 'wifiRadio_messageReceived' 'wifi message received?'
  spec 'r' 'wifiRadio_receivedInteger' 'wifi last number'
  spec 'r' 'wifiRadio_receivedString' 'wifi last string'
  space
  spec ' ' 'wifiRadio_setGroup' 'wifi set group _ (0-255)' 'num' 0
  space
  spec ' ' '_wifiRadio_init' '_wifiRadio_init'

to '_wifiRadio_init' {
  comment 'Open WiFi Radio UDP port if necessary.'
  if (_wifiRadio_broadcastAddr == 0) {
    if ((getIPAddress) == '0.0.0.0') {
      sayIt 'Connect to WiFi to use WiFi Radio.'
    } else {
      '[net:udpStart]' 34567
      _wifiRadio_group = 0
      local 'myIPAddr' (getIPAddress)
      for i ('[data:range]' (size myIPAddr) 1) {
        if ((at i (getIPAddress)) == '.') {
          _wifiRadio_broadcastAddr = ('[data:join]' ('[data:copyFromTo]' myIPAddr 1 i) '255')
          return 0
        }
      }
    }
  }
}

to wifiRadio_messageReceived {
  '_wifiRadio_init'
  local 'msg' ('[net:udpReceivePacket]' true)
  if ((size msg) < 8) {
    return (booleanConstant false)
  }
  if (not (and ((at 1 msg) == 77) (and ((at 2 msg) == 66) ((at 3 msg) == 82)))) {
    return (booleanConstant false)
  }
  if ((at 4 msg) != _wifiRadio_group) {
    return (booleanConstant false)
  }
  _wifiRadio_lastNumber = ((at 5 msg) | (((at 6 msg) << 8) | (((at 7 msg) << 16) | ((at 8 msg) << 24))))
  local 'highByte' (at 8 msg)
  if (and (64 <= highByte) (highByte <= 127)) {
    _wifiRadio_lastNumber = 'out of range number (positve)'
  }
  if (and (128 <= highByte) (highByte <= 191)) {
    _wifiRadio_lastNumber = 'out of range number (negative)'
  }
  _wifiRadio_lastString = ('[data:join]' '' ('[data:copyFromTo]' msg 9))
  return (booleanConstant true)
}

to wifiRadio_receivedInteger {
  return _wifiRadio_lastNumber
}

to wifiRadio_receivedString {
  if (_wifiRadio_lastString == 0) {_wifiRadio_lastString = ''}
  return _wifiRadio_lastString
}

to wifiRadio_sendNumber n {
  wifiRadio_sendPair '' n
}

to wifiRadio_sendPair s n {
  '_wifiRadio_init'
  local 'msg' ('[data:newByteArray]' 8)
  comment 'MicroBlocks WiFi Radio message format:
  tag: ''MBR'' (3 bytes)
  group (1 byte)
  number, LSB (4 bytes)
  utf8 string datat (variable length)'
  atPut 1 msg 77
  atPut 2 msg 66
  atPut 3 msg 82
  atPut 4 msg _wifiRadio_group
  atPut 5 msg (n & 255)
  atPut 6 msg ((n >> 8) & 255)
  atPut 7 msg ((n >> 16) & 255)
  atPut 8 msg ((n >> 24) & 255)
  msg = ('[data:join]' msg ('[data:asByteArray]' s))
  comment 'Broadcast msg to the WiFi Radio port number on all boards on the WiFi network.'
  '[net:udpSendPacket]' msg _wifiRadio_broadcastAddr 34567
}

to wifiRadio_sendString s {
  wifiRadio_sendPair s 0
}

to wifiRadio_setGroup n {
  '_wifiRadio_init'
  _wifiRadio_group = n
}

