module 'RFID (RC522)' Input
author MicroBlocks
version 1 6 
description 'Support for RC522 RFID card with I2C and SPI interfaces.
Based on JosÃ© Garcia RC522 MicroBlocks library which itself was based on:
        https://github.com/m5stack/UIFlow-Code/blob/master/units/_rfid.py
        and Arduino SPI Library: https://github.com/miguelbalboa/rfid/

Tested with:
        https://www.microcenter.com/product/639731/inland-ks0067-rc522-rfid-module-for-arduino
        https://techatronic.com/rfid-rc522-module-rfid-sensor-working-description/
        https://shop.m5stack.com/products/rfid-unit-2-ws1850s
        https://shop.m5stack.com/products/rfid-sensor-unit
'
variables _rc522_mode _rc522_i2cAddr _rc522_initialized _rc522_nssPin 

  spec ' ' 'rc522_initialize_I2C' 'RC522 initialize I2C addr _' 'num' 40
  spec ' ' 'rc522_initialize_SPI' 'RC522 initialize SPI ssPin _' 'num' 17
  spec 'r' 'rc522_connected' 'RC522 is connected'
  space
  spec 'r' 'rc522_card_present' 'RC522 is card present'
  spec 'r' 'rc522_read_uid' 'RC522 card UID'
  space
  spec 'r' 'rc522_equal_ids' 'RC522 _ = _' 'auto auto' 'uid1' 'uid2'
  space
  spec ' ' '_rc522_antenna_on' '_rc522_antenna_on'
  spec 'r' '_rc522_request' '_rc522_request'
  spec 'r' '_rc522_send_to_card' '_rc522_send_to_card _ _' 'auto auto' 0 'list'
  spec ' ' '_rc522_bitset' '_rc522_bitset reg _ mask _' 'num num' 0 128
  spec ' ' '_rc522_bitclear' '_rc522_bitclear reg _ mask _' 'num num' 0 128
  spec 'r' '_rc522_read_reg' '_rc522_read_reg _' 'num' 55
  spec ' ' '_rc522_write_reg' '_rc522_write_reg _ value _' 'num num' 1 15

to '_rc522_antenna_on' {
  local 'value' ('_rc522_read_reg' (hexToInt '14'))
  if (and (value >= 0) ((value & 3) != 3)) {
    '_rc522_write_reg' (hexToInt '14') (value | 3)
  }
}

to '_rc522_bitclear' reg mask {
  '_rc522_write_reg' reg (('_rc522_read_reg' reg) & ('~' mask))
}

to '_rc522_bitset' reg mask {
  '_rc522_write_reg' reg (('_rc522_read_reg' reg) | mask)
}

to '_rc522_read_reg' reg {
  local 'result' 0
  if ('SPI' == _rc522_mode) {
    digitalWriteOp _rc522_nssPin false
    spiSend (128 | (reg << 1))
    result = (spiRecv)
    digitalWriteOp _rc522_nssPin true
  } ('I2C' == _rc522_mode) {
    result = (i2cGet _rc522_i2cAddr reg)
  }
  return result
}

to '_rc522_request' {
  '_rc522_write_reg' (hexToInt '0D') 7
  return ('_rc522_send_to_card' (hexToInt '0C') ('[data:makeList]' (hexToInt '26')))
}

to '_rc522_send_to_card' cmd send {
  '_rc522_write_reg' 2 ((hexToInt '77') | (hexToInt '80'))
  '_rc522_bitclear' (hexToInt '04') (hexToInt '80')
  '_rc522_bitset' (hexToInt '0A') (hexToInt '80')
  for i (size send) {
    '_rc522_write_reg' 9 (at i send)
  }
  '_rc522_write_reg' 1 cmd
  '_rc522_bitset' (hexToInt '0D') (hexToInt '80')
  waitMillis 10
  '_rc522_bitclear' (hexToInt '0D') (hexToInt '80')
  local 'response' (newList 1)
  atPut 1 response (('_rc522_read_reg' 6) & (hexToInt '1B'))
  if ((at 1 response) == 0) {
    local 'n' ('_rc522_read_reg' (hexToInt '0A'))
    for i n {
      '[data:addLast]' ('_rc522_read_reg' 9) response
    }
  }
  return response
}

to '_rc522_write_reg' reg value {
  if ('SPI' == _rc522_mode) {
    digitalWriteOp _rc522_nssPin false
    spiSend (reg << 1)
    spiSend value
    digitalWriteOp _rc522_nssPin true
  } ('I2C' == _rc522_mode) {
    i2cSet _rc522_i2cAddr reg value
  }
}

to rc522_card_present {
  local 'res' ('_rc522_request')
  if ((at 1 res) == 0) {
    if ((size res) == 3) {
      return (booleanConstant true)
    } else {
      waitMillis 5
      res = ('_rc522_request')
      return ((size res) == 3)
    }
  } else {
    return (booleanConstant false)
  }
}

to rc522_connected {
  local 'version' ('_rc522_read_reg' (hexToInt '37'))
  if (('[data:find]' version ('[data:makeList]' 21 136 144 145 146 178)) > 0) {
    return true
  } (version > 0) {
    sayIt 'Unknown RC522 Version:' version
    waitMillis 1000
    return true
  } else {
    return false
  }
}

to rc522_equal_ids id1 id2 {
  if (or (id1 == 0) (id2 == 0)) {return (booleanConstant false)}
  if ((size id1) != (size id2)) {return (booleanConstant false)}
  for i (size id1) {
    if ((at i id1) != (at i id2)) {return (booleanConstant false)}
  }
  return (booleanConstant true)
}

to rc522_initialize_I2C i2cAddr {
  _rc522_mode = 'I2C'
  _rc522_i2cAddr = i2cAddr
  if (_rc522_initialized == 0) {
    _rc522_initialized = (booleanConstant true)
    '_rc522_write_reg' 1 (hexToInt 'F')
    waitMillis 50
    '_rc522_write_reg' (hexToInt '2A') (hexToInt '80')
    '_rc522_write_reg' (hexToInt '2B') (hexToInt 'A9')
    '_rc522_write_reg' (hexToInt '2C') (hexToInt '03')
    '_rc522_write_reg' (hexToInt '2D') (hexToInt 'E8')
    '_rc522_write_reg' (hexToInt '15') (hexToInt '40')
    '_rc522_write_reg' (hexToInt '11') (hexToInt '3D')
    '_rc522_antenna_on'
  }
}

to rc522_initialize_SPI ssPin {
  _rc522_mode = 'SPI'
  _rc522_nssPin = ssPin
  if (_rc522_initialized == 0) {
    _rc522_initialized = (booleanConstant true)
    '_rc522_write_reg' 1 (hexToInt 'F')
    waitMillis 1
    '_rc522_write_reg' (hexToInt '2A') (hexToInt '80')
    '_rc522_write_reg' (hexToInt '2B') (hexToInt 'A9')
    '_rc522_write_reg' (hexToInt '2C') (hexToInt '03')
    '_rc522_write_reg' (hexToInt '2D') (hexToInt 'E8')
    '_rc522_write_reg' (hexToInt '15') (hexToInt '40')
    '_rc522_write_reg' (hexToInt '11') (hexToInt '3D')
    '_rc522_antenna_on'
  }
}

to rc522_read_uid {
  if (rc522_card_present) {
    '_rc522_write_reg' (hexToInt '0D') 0
    local 'res' ('_rc522_send_to_card' (hexToInt '0C') ('[data:makeList]' (hexToInt '93') (hexToInt '20')))
    '[data:delete]' 1 res
    '[data:delete]' 'last' res
    return res
  } else {
    return ('[data:makeList]')
  }
}

