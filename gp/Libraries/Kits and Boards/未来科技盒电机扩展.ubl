module '未来科技盒电机扩展'
author '邵悦'
version 1 1 
choices motorMenu A B C D 
choices PosMenu left right 
description '腾讯未来科技盒子配套电机扩展
小车项目需要用的库
PCA9865 控制芯片I2C控制 A B C D 4路电机
超声波HC-SR04 触发16 接收17
巡线 左接16 右接17
'
variables _robotbitMicrosecsPerCycle _sr04_last zeroCount 

  spec ' ' '电机初始化' '电机初始化'
  spec ' ' '电机全部停止' '电机全部停止'
  spec ' ' '电机' '电机 _ 速度 _ （-100～100）' 'menu.motorMenu num' 'A' 60
  spec ' ' '平滑调速' '平稳调速 初始速度 _ 目标速度 _ 耗时 _ （毫秒） 电机 _' 'auto auto auto menu.motorMenu' 0 100 1000 'A'
  space
  spec 'r' '巡线传感器' '巡线传感器 _ 检测到黑线?' 'menu.PosMenu' 'left'
  spec 'r' '巡线状态' '巡线状态 左在线 _ 右在线 _' 'bool bool' true true
  spec 'r' 'distance (cm)' '距离 (cm) 触发 _ 回声 _' 'num num' 14 13
  space
  spec ' ' '_cocoroboMotorAllOff' '_cocoroboMotorAllOff'
  spec ' ' '_setPWM2' '_setPWM2 _ _ _' 'auto auto auto' 1 0 2048

to '_cocoroboMotorAllOff' {
  comment 'Writing to egisters 250-253 sets the PWM parameters
for all 16 channels at once. Here we turn them all off.
See the PCA9685 datasheet for technical details.'
  for i 4 {
    i2cSet 64 (249 + i) 0
  }
}

to '_setPWM2' channel on off {
  if (or (channel < 0) (channel > 15)) {return 0}
  local 'buf' ('[data:newByteArray]' 5)
  atPut 1 buf (6 + (4 * channel))
  atPut 2 buf (on & 255)
  atPut 3 buf ((on >> 8) & 255)
  atPut 4 buf (off & 255)
  atPut 5 buf ((off >> 8) & 255)
  '[sensors:i2cWrite]' 64 buf
}

to 'distance (cm)' trig ech {
  comment '触发蓝色 接14引脚，回声黄色接13引脚'
  comment 'Contributed by Joan Guillén and Josep Ferràndiz'
  digitalWriteOp trig false
  waitMicros 2
  digitalWriteOp trig true
  waitMicros 50
  digitalWriteOp trig false
  local 'start' (microsOp)
  waitUntil (or (not (digitalReadOp ech)) (((microsOp) - start) > 23320))
  waitUntil (or (digitalReadOp ech) (((microsOp) - start) > 23320))
  if (((microsOp) - start) > 23320) {
    comment 'Distance sensor not ready; return the last distance reading'
    return _sr04_last
  }
  comment 'Pulse sent. Measure time until echo is detected.'
  start = (microsOp)
  waitUntil (or (not (digitalReadOp ech)) (((microsOp) - start) > 23320))
  _sr04_last = ((10 * ((microsOp) - start)) / 583)
  comment 'Leave some time for reverberations to die away.'
  waitMillis 10
  if (_sr04_last == 0) {
    zeroCount += 1
  }
  return _sr04_last
}

to '巡线传感器' lr {
  comment '检测到在黑线返回True真，否则返回 False 假
左边LO蓝色引脚25，右边RO黄色引脚27'
  local '_pin_line_left' 25
  local '_pin_line_right' 27
  if (lr == 'left') {
    return (digitalReadOp _pin_line_left)
  } (lr == 'right') {
    return (digitalReadOp _pin_line_right)
  }
}

to '巡线状态' leftSide rightSide {
  comment '在线上是指检测到在黑线上'
  return (and (leftSide == ('巡线传感器' 'left')) (rightSide == ('巡线传感器' 'right')))
}

to '平滑调速' start target time motor {
  comment '在指定时间内电机从起始速度分10档匀速达到设定速度'
  for i ('[data:range]' start target 10) {
    '电机' motor i
    waitMillis (time / 10)
  }
}

to '电机' foo speed {
  if (speed < -100) {
    speed = -100
  } (100 < speed) {
    speed = 100
  }
  if (speed < 0) {
    speed = (0 - speed)
    if (foo == 'A') {
      '_setPWM2' 8 0 4000
      '_setPWM2' 9 0 (speed * 40)
      '_setPWM2' 10 0 0
    } (foo == 'B') {
      '_setPWM2' 11 0 0
      '_setPWM2' 12 0 (speed * 40)
      '_setPWM2' 13 0 4000
    } (foo == 'C') {
      '_setPWM2' 5 0 0
      '_setPWM2' 6 0 (speed * 40)
      '_setPWM2' 7 0 4000
    } (foo == 'D') {
      '_setPWM2' 2 0 4000
      '_setPWM2' 3 0 (speed * 40)
      '_setPWM2' 4 0 0
    }
  } else {
    if (foo == 'A') {
      '_setPWM2' 8 0 4000
      '_setPWM2' 9 0 0
      '_setPWM2' 10 0 (speed * 40)
    } (foo == 'B') {
      '_setPWM2' 11 0 (speed * 40)
      '_setPWM2' 12 0 0
      '_setPWM2' 13 0 4000
    } (foo == 'C') {
      '_setPWM2' 5 0 (speed * 40)
      '_setPWM2' 6 0 0
      '_setPWM2' 7 0 4000
    } (foo == 'D') {
      '_setPWM2' 2 0 4000
      '_setPWM2' 3 0 0
      '_setPWM2' 4 0 (speed * 40)
    }
  }
}

to '电机全部停止' {
  '电机' 'A' 0
  '电机' 'B' 0
  '电机' 'C' 0
  '电机' 'D' 0
}

to '电机初始化' {
  comment 'PCA9865 初始化'
  comment 'Enter sleep mode'
  i2cSet 64 0 (hexToInt '10')
  comment 'Set prescale register to generate 50 Hz'
  i2cSet 64 (hexToInt 'FE') (25000000 / (50 * 4096))
  '_cocoroboMotorAllOff'
  comment 'Start PWM again (with autoincrement enabled)'
  i2cSet 64 0 (hexToInt '20')
  _robotbitMicrosecsPerCycle = 20000
}

