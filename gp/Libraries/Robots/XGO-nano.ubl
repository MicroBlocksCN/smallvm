module 'XGO-nano' Control
author luwudynamics
version 3 1 
choices leg_Menu '左前' '右前' '右后' '左后' 
choices arm_Menu '上（-65°-65°）' '中（-115°-70°）' '下（-90°-105°）' 
choices move_direction_Menu X Y 
choices motor_Menu '上（-30°-30°）' '中（-70°-90°）' '下（-85°-50°）' 
choices transmove_Menu 'X(-25mm-25mm)' 'Y(-18mm-18mm)' 'Z(60mm-110mm)' 
choices direction_Menu '逆时针' '顺时针' 
choices speed_Menu '正常' '慢速' '快速' 
choices translation_Menu X Y Z 
choices transrotate_Menu 'X(-20°-20°)' 'Y(-20°-20°)' 'Z(-12°-12°)' 
choices gait_Menu '对角' '行走' '高抬腿' '微调' 
choices button_Menu A B 
choices attitude_Menu R P Y 
choices move_Menu '前平移（0mm~25mm）' '后平移（-25mm~0mm）' '左平移（0mm~18mm）' '右平移（-18mm~0mm）' 
choices angle_Menu roll pitch yaw 
choices action_Menu '趴下' '站起' '匍匐前进' '转圈' '踏步' '蹲起' '转动ROLL' '转动PITCH' '转动YAW' '三轴转动' '撒尿' '坐下' '招手' '伸懒腰' '波浪' '摇摆' '乞讨' '找食物' '握手' '鸡头' '俯卧撑' '张望' '跳舞' '调皮' '上抓' '中抓' '下抓' '爬楼梯' '爬双层楼梯' 
description 'XGO-nano is a desktop-level robotic dog with 15 degrees of freedom and a mechanical arm. The building block library includes the xyz-axis translational motion of the robotic dog, xyz-axis rotational motion, and various states of motion overlay, motion parameter settings, and reading the status of the robotic dog.
'
variables _serialMode _buffer HL_I2C_address _cmd_list data cmd steps arm_z _bufferdata '动作列表' _buttons 

  spec ' ' '初始化XGO-nano' 'XGO初始化'
  spec ' ' 'XGO复位' 'XGO恢复初始状态'
  space
  spec 'r' '机器狗模拟读取' '模拟读取'
  spec 'r' '机器狗数字读取' '数字读取'
  spec 'r' '读取机器狗电量' '读取当前电量'
  spec 'r' '获取机器狗版本' '读取全部舵机角度'
  spec 'r' '读取第' '读取第 _ 腿舵机值' 'auto' 1
  spec 'r' '姿态角度' '读取整数姿态角度 _' 'menu.angle_Menu' 'roll'
  space
  spec ' ' '将当前朝向设置为0' '设置当前朝向为0'
  spec ' ' '设置转动到角度' '设置转动到角度 _' 'auto' '10'
  space
  spec ' ' '设置迈步频率为' '设置迈步频率为 _' 'menu.speed_Menu num' '正常'
  spec ' ' '设置运动步态为' '设置运动步态为 _' 'menu.gait_Menu num' '对角'
  spec ' ' '单个舵机运动' '设置 _  腿 _ 关节舵机转动至 _ °' 'menu.leg_Menu menu.motor_Menu num' '左前' '上（-30°-30°）' 10
  spec ' ' '机械臂运动' '设置机械臂 _ 关节舵机转动至 _ °' 'menu.arm_Menu num' '上（-65°-65°）' 40
  spec ' ' '设置舵机运动速度' '舵机运动速度 _' 'auto' '200'
  spec ' ' '设置机械臂运动速度' '机械臂运动速度 _' 'auto' '200'
  space
  spec ' ' '执行命令' '执行命令 _' 'menu.action_Menu' '趴下'
  spec ' ' '机器狗平移' '向 _ 步幅为 _ 毫米持续 _ 毫秒' 'menu.move_Menu num num' '前平移（0mm~25mm）' 15 3000
  spec ' ' '机器狗旋转' '向 _ 方向以速度 _ 度/秒旋转 _ 毫秒' 'menu.direction_Menu num num' '逆时针' 100 3000
  spec ' ' '机器狗平移无时间' '向 _ 步幅为 _ 毫米' 'menu.move_Menu num num' '前平移（0mm~25mm）' 15
  spec ' ' '机器狗旋转无时间' '向 _ 方向以速度 _ 度/秒' 'menu.direction_Menu num' '逆时针' 100
  spec ' ' '机器狗轴向平移' '沿 _ 轴平移 _ mm' 'menu.transmove_Menu num' 'X(-25mm-25mm)' 5
  spec ' ' '机器狗轴向旋转' '沿 _ 旋转 _ °' 'menu.transrotate_Menu num' 'X(-20°-20°)' 5
  spec ' ' '机器狗单腿运动' '设置 _ 腿足尖坐标位置为 X（-25-25） _ mm Y（-15-15） _ mm Z（60-110） _ mm' 'menu.leg_Menu num num num' '左前' 0 0 70
  space
  spec ' ' '机器狗机械臂' '设置机械臂末端坐标位置X（-80-155） _ mm Z（-95-155） _ mm' 'auto auto' 100 -60
  spec ' ' '机器狗夹爪' '机械爪开合 _' 'auto' '128'
  space
  spec ' ' '机器狗陀螺仪重置' '陀螺仪重置'
  spec ' ' '陀螺仪' '陀螺仪 _' 'bool' false
  spec ' ' '表演模式' '表演模式 _' 'bool' false
  spec ' ' '卸载所有舵机' '卸载所有舵机 _' 'bool' false
  spec ' ' '2P' '2Pin接口 5V输出 _' 'bool' false
  spec ' ' '数字IO输出' '数字IO输出 _' 'bool' false
  spec 'r' '读取按键' '读取按键 _' 'menu.button_Menu' 'A'
  space
  spec ' ' '_执行动作组编号' '执行编号 _ 动作组' 'auto' 1
  spec 'r' '_button double pressed' 'button _ double pressed' 'auto' 'A'
  spec 'r' '_button pressed' 'button _ pressed' 'auto' 5
  spec 'r' '_button long pressed' 'button _ long pressed' 'auto' 5
  spec ' ' '_XGO转向' 'XGO转向 _' 'auto' '10'
  spec ' ' '_移动机器狗' 'XGO-nano 移动方向 _ 步数 _' 'menu.move_direction_Menu num' 'X' 2
  spec 'r' '_conver2u8t' '_conver2u8t _ _ _' 'auto auto auto' '10' '10' '10'
  spec 'r' '_conver2u8' '_conver2u8 _ _' 'num num' 30 96
  spec ' ' '_机器狗单腿运动' '设置 _ 腿足尖坐标位置 X _ Y _ Z _' 'num num num num' 1 2 2 66
  spec ' ' '_HLgetdata_from_cmd' '_read_data'
  spec 'r' '_conver2float' '_conver2float _ _ _' 'auto auto auto' '10' '10' '10'
  spec ' ' '_单个舵机' '单个舵机 _ _ _ _' 'auto auto auto auto' 10 10 '10' '10'
  spec ' ' '_运动步态' '运动步态 _' 'auto' '10'
  spec ' ' '_单个舵机运动' '舵机编号 _  角度 _ °' 'num num' 1 40
  spec ' ' '_串口结束' '_串口结束'
  spec 'r' '_修正后的余数' '_修正后的余数 _ _' 'auto auto' '10' '10'
  spec 'r' '_button' '_button _' 'auto' 10
  spec ' ' '_updateButtons' '_updateButtons'
  spec 'r' '_read button' '_read button _' 'auto' 10

to '2P' mode {
  if (mode == (booleanConstant true)) {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 144 1 100))
    '_串口结束'
  } else {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 144 0 101))
    '_串口结束'
  }
}

to 'XGO复位' {
  '_执行动作组编号' 255
  waitMillis 100
}

to '_HLgetdata_from_cmd' {
  repeatUntil (0 == (('[data:joinStrings]' _buffer) + 0)) {
    _buffer = (newList 32)
    local 'idx' 1
    local 'serBuff' ('[serial:read]')
    waitMillis 20
    if ((size serBuff) > 0) {
      for byte serBuff {
        atPut idx _buffer byte
        idx += 1
      }
    }
  }
}

to '_XGO转向' steps {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 50 ('_conver2u8' 100 steps)))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (60 + ('_conver2u8' 100 steps))) % 256))))
  '_串口结束'
}

to '_button' 'pin or name' {
  '_updateButtons'
  for 'each button' _buttons {
    if ((at 1 (v 'each button')) == (v 'pin or name')) {return (v 'each button')}
  }
  comment 'This button has not been initialized. Let''s add it.'
  local 'new button' ('[data:makeList]' (v 'pin or name') '' '' 'waiting')
  '[data:addLast]' (v 'new button') _buttons
  return (v 'new button')
}

to '_button double pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'double press') {
    comment 'We only go back to "waiting" after a double press if the event has been handled
and the user has released the button. Otherwise we''ll cause false "single press"
positives.'
    atPut 4 button 'double press handled'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}

to '_button long pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'long press') {
    atPut 4 button 'waiting'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}

to '_button pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'single press') {
    atPut 4 button 'waiting'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}

to '_conver2float' data min max {
  return (((data * (max - min)) / 255) + min)
}

to '_conver2u8' limit u8_data {
  return ((255 * (u8_data + limit)) / (limit * 2))
}

to '_conver2u8t' min_data max_data u8_data {
  if (min_data <= u8_data) {
    return ((255 * (u8_data - min_data)) / (max_data - min_data))
  } else {
    return 0
  }
}

to '_read button' 'pin or name' {
  if ((v 'pin or name') == 'A') {
    return (buttonA)
  } ((v 'pin or name') == 'B') {
    return (buttonB)
  } else {
    return (digitalReadOp (v 'pin or name'))
  }
}

to '_updateButtons' {
  if (_buttons == 0) {_buttons = ('[data:makeList]')}
  for button _buttons {
    local 'currently pressed' ('_read button' (at 1 button))
    local 'previous state' (at 4 button)
    if (and ((v 'previous state') == 'waiting') (v 'currently pressed')) {
      comment 'save state change time'
      atPut 2 button (millisOp)
      atPut 3 button (v 'currently pressed')
      atPut 4 button 'pressed'
    } (and ((v 'previous state') == 'pressed') (not (v 'currently pressed'))) {
      local 'press time' ((millisOp) - (at 2 button))
      comment 'There''s been a press. Let''s check how long it was.'
      if ((v 'press time') > 500) {
        atPut 4 button 'long press'
      } ((v 'press time') > 250) {
        atPut 4 button 'single press'
      } else {
        comment 'This is an internal intermediate state.
It could turn out to be a single press or a double press.'
        atPut 2 button (millisOp)
        atPut 4 button 'short press'
      }
    } (and ((v 'previous state') == 'short press') (v 'currently pressed')) {
      atPut 4 button 'double press'
    } (and (and ((v 'previous state') == 'short press') (not (v 'currently pressed'))) (((millisOp) - (at 2 button)) > 250)) {
      atPut 4 button 'single press'
    } (and ((v 'previous state') == 'double press handled') (not (v 'currently pressed'))) {
      comment 'We only go back to "waiting" after a double press if the event has been handled
and the user has released the button. Otherwise we''ll cause false "single press"
positives.'
      atPut 4 button 'waiting'
    }
  }
}

to '_串口结束' {
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' 0 170)))
  '[serial:write]' _buffer
  waitMillis 50
}

to '_修正后的余数' arg value {
  if ((255 - (arg + value)) >= 0) {
    return ((255 - (arg + value)) % 255)
  } else {
    return (((255 - (arg + value)) % 255) + 1)
  }
}

to '_单个舵机' args steps min max {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 args ('_conver2u8t' min max steps)))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - ((10 + args) + ('_conver2u8t' min max steps))) % 256))))
  '_串口结束'
}

to '_单个舵机运动' nums steps {
  if (nums == 1) {
    '_单个舵机' 80 steps -70 50
  } (nums == 2) {
    '_单个舵机' 81 steps -70 90
  } (nums == 3) {
    '_单个舵机' 82 steps -30 30
  } (nums == 4) {
    '_单个舵机' 83 steps -70 50
  } (nums == 5) {
    '_单个舵机' 84 steps -70 90
  } (nums == 6) {
    '_单个舵机' 85 steps -30 30
  } (nums == 7) {
    '_单个舵机' 86 steps -70 50
  } (nums == 8) {
    '_单个舵机' 87 steps -70 90
  } (nums == 9) {
    '_单个舵机' 88 steps -30 30
  } (nums == 10) {
    '_单个舵机' 89 steps -70 50
  } (nums == 11) {
    '_单个舵机' 90 steps -70 90
  } (nums == 12) {
    '_单个舵机' 91 steps -30 30
  } (nums == 13) {
    '_单个舵机' 113 steps -65 65
  } (nums == 14) {
    '_单个舵机' 93 steps -115 70
  } (nums == 15) {
    '_单个舵机' 94 steps -85 100
  }
}

to '_执行动作组编号' data {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 62 data))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (72 + data)) % 256))))
  '_串口结束'
}

to '_机器狗单腿运动' leg X Y Z {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 (leg + 64) ('_conver2u8' 25 X)))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' (leg + 74) ('_conver2u8' 25 X)))))
  '_串口结束'
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 (leg + 65) ('_conver2u8' 18 Y)))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' (leg + 75) ('_conver2u8' 18 Y)))))
  '_串口结束'
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 (leg + 66) ('_conver2u8t' 60 110 Z)))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' (leg + 76) ('_conver2u8t' 60 110 Z)))))
  '_串口结束'
}

to '_移动机器狗' move_direction steps {
  if (move_direction == 'X') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 48 ('_conver2u8' 25 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (58 + ('_conver2u8' 25 steps))) % 256))))
    '_串口结束'
  } (move_direction == 'Y') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 49 ('_conver2u8' 18 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (59 + ('_conver2u8' 18 steps))) % 256))))
    '_串口结束'
  }
}

to '_运动步态' x {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 9 x))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (19 + x)) % 256))))
  '_串口结束'
}

to '初始化XGO-nano' {
  '[serial:open]' 115200
}

to '单个舵机运动' legs motor degree {
  if (legs == '左前') {
    if (motor == '上（-30°-30°）') {
      '_单个舵机运动' 3 degree
    } (motor == '中（-70°-90°）') {
      '_单个舵机运动' 2 degree
    } (motor == '下（-85°-50°）') {
      '_单个舵机运动' 1 degree
    }
  } (legs == '右前') {
    if (motor == '上（-30°-30°）') {
      '_单个舵机运动' 6 degree
    } (motor == '中（-70°-90°）') {
      '_单个舵机运动' 5 degree
    } (motor == '下（-85°-50°）') {
      '_单个舵机运动' 4 degree
    }
  } (legs == '右后') {
    if (motor == '上（-30°-30°）') {
      '_单个舵机运动' 9 degree
    } (motor == '中（-70°-90°）') {
      '_单个舵机运动' 8 degree
    } (motor == '下（-85°-50°）') {
      '_单个舵机运动' 7 degree
    }
  } (legs == '左后') {
    if (motor == '上（-30°-30°）') {
      '_单个舵机运动' 12 degree
    } (motor == '中（-70°-90°）') {
      '_单个舵机运动' 11 degree
    } (motor == '下（-85°-50°）') {
      '_单个舵机运动' 10 degree
    }
  }
}

to '卸载所有舵机' mode {
  if (mode == (booleanConstant true)) {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 32 1))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (42 + 1)) % 255))))
    '_串口结束'
  } else {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 32 0))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (42 + 0)) % 255))))
    '_串口结束'
  }
}

to '姿态角度' angel {
  if (angel == 'roll') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 2 102 2 140))
    '_串口结束'
  } (angel == 'pitch') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 2 103 2 139))
    '_串口结束'
  } (angel == 'yaw') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 2 104 2 138))
    '_串口结束'
  }
  local 'rx_data' ('[serial:read]')
  if ((at 'last' rx_data) == 170) {
    if ((at 6 rx_data) > 128) {
      return ((at 7 rx_data) + (((at 6 rx_data) - 256) * 256))
    } else {
      return ((at 7 rx_data) + ((at 6 rx_data) * 256))
    }
  } else {
    sayIt '通信失败！！！'
  }
}

to '将当前朝向设置为0' {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 6 1 238))
  '_串口结束'
}

to '执行命令' foo {
  if (not (isType 动作列表 'list')) {动作列表 = ('[data:split]' '趴下,站起,匍匐前进,转圈,踏步,蹲起,转动ROLL,转动PITCH,转动YAW,三轴转动,撒尿,坐下,招手,伸懒腰,波浪,摇摆,乞讨,找食物,握手,鸡头,俯卧撑,张望,跳舞,调皮,上抓,中抓,下抓,爬楼梯,爬双层楼梯' ',')}
  local 'an' ('[data:find]' foo 动作列表)
  if (an == 25) {
    '_执行动作组编号' 128
  } (an == 26) {
    '_执行动作组编号' 129
  } (an == 27) {
    '_执行动作组编号' 130
  } (an == 28) {
    '_执行动作组编号' 144
  } (an == 29) {
    '_执行动作组编号' 145
  } else {
    '_执行动作组编号' an
  }
}

to '数字IO输出' mode {
  if (mode == (booleanConstant true)) {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 145 1 99))
    '_串口结束'
  } else {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 145 0 100))
    '_串口结束'
  }
}

to '机器狗单腿运动' leg X Y Z {
  if (leg == '左前') {
    '_机器狗单腿运动' 0 X Y Z
  } (leg == '右前') {
    '_机器狗单腿运动' 3 X Y Z
  } (leg == '右后') {
    '_机器狗单腿运动' 6 X Y Z
  } (leg == '左后') {
    '_机器狗单腿运动' 9 X Y Z
  }
}

to '机器狗夹爪' pos {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 113 pos))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' 123 ('_conver2u8t' 0 255 pos)))))
  '_串口结束'
}

to '机器狗平移' move_direction steps times {
  if (move_direction == '前平移（0mm~25mm）') {
    '_移动机器狗' 'X' steps
    waitMillis times
    '_移动机器狗' 'X' 0
    waitMillis 50
    '_移动机器狗' 'Y' 0
  } (move_direction == '后平移（-25mm~0mm）') {
    '_移动机器狗' 'X' (0 - steps)
    waitMillis times
    '_移动机器狗' 'X' 0
    waitMillis 50
    '_移动机器狗' 'Y' 0
  } (move_direction == '左平移（0mm~18mm）') {
    '_移动机器狗' 'Y' steps
    waitMillis times
    '_移动机器狗' 'Y' 0
    waitMillis 50
    '_移动机器狗' 'X' 0
  } (move_direction == '右平移（-18mm~0mm）') {
    '_移动机器狗' 'Y' (0 - steps)
    waitMillis times
    '_移动机器狗' 'Y' 0
    waitMillis 50
    '_移动机器狗' 'X' 0
  }
}

to '机器狗平移无时间' move_direction steps times {
  if (move_direction == '前平移（0mm~25mm）') {
    '_移动机器狗' 'X' steps
    '_移动机器狗' 'Y' 0
  } (move_direction == '后平移（-25mm~0mm）') {
    '_移动机器狗' 'X' (0 - steps)
    '_移动机器狗' 'Y' 0
  } (move_direction == '左平移（0mm~18mm）') {
    '_移动机器狗' 'Y' steps
    '_移动机器狗' 'X' 0
  } (move_direction == '右平移（-18mm~0mm）') {
    '_移动机器狗' 'Y' (0 - steps)
    '_移动机器狗' 'X' 0
  }
}

to '机器狗数字读取' {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 2 147 1 96))
  '_串口结束'
  local 'rx_data' ('[serial:read]')
  if ((at 'last' rx_data) == 170) {
    return (at 6 rx_data)
  } else {
    sayIt '通信失败！！！'
  }
}

to '机器狗旋转' direction steps times {
  if (direction == '逆时针') {
    '_XGO转向' steps
    waitMillis times
    '_XGO转向' 0
  } (direction == '顺时针') {
    '_XGO转向' (0 - steps)
    waitMillis times
    '_XGO转向' 0
  }
}

to '机器狗旋转无时间' direction steps times {
  if (direction == '逆时针') {
    '_XGO转向' steps
  } (direction == '顺时针') {
    '_XGO转向' (0 - steps)
  }
}

to '机器狗机械臂' arm_x arm_z {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 115 ('_conver2u8t' -80 155 arm_x)))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' 125 ('_conver2u8t' -80 155 arm_x)))))
  '_串口结束'
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 116 ('_conver2u8t' -95 155 arm_z)))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' 126 ('_conver2u8t' -95 155 arm_z)))))
  '_串口结束'
}

to '机器狗机械臂稳定模式' mode {
  if (mode == (booleanConstant true)) {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 114 1))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (124 + 1)) % 255))))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' 0 170)))
    '[serial:write]' _buffer
    waitMillis 50
  } else {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 114 0))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (124 + 0)) % 255))))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' 0 170)))
    '[serial:write]' _buffer
    waitMillis 50
  }
}

to '机器狗模拟读取' {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 2 146 1 97))
  '_串口结束'
  local 'rx_data' ('[serial:read]')
  if ((at 'last' rx_data) == 170) {
    return (at 6 rx_data)
  } else {
    sayIt '通信失败！！！'
  }
}

to '机器狗轴向平移' direction steps {
  if (direction == 'X(-25mm-25mm)') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 51 ('_conver2u8' 25 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (61 + ('_conver2u8' 25 steps))) % 256))))
    '_串口结束'
  } (direction == 'Y(-18mm-18mm)') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 52 ('_conver2u8' 18 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (62 + ('_conver2u8' 18 steps))) % 256))))
    '_串口结束'
  } (direction == 'Z(60mm-110mm)') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 53 ('_conver2u8t' 60 110 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (63 + ('_conver2u8t' 60 110 steps))) % 256))))
    '_串口结束'
  }
}

to '机器狗轴向旋转' direction steps {
  if (direction == 'X(-20°-20°)') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 54 ('_conver2u8' 20 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (64 + ('_conver2u8' 20 steps))) % 256))))
    '_串口结束'
  } (direction == 'Y(-20°-20°)') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 55 ('_conver2u8' 20 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (65 + ('_conver2u8' 20 steps))) % 256))))
    '_串口结束'
  } (direction == 'Z(-12°-12°)') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 56 ('_conver2u8' 12 steps)))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (66 + ('_conver2u8' 12 steps))) % 256))))
    '_串口结束'
  }
}

to '机器狗陀螺仪重置' {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 96 1 148))
  '_串口结束'
  waitMillis 5000
}

to '机械臂运动' arm degree {
  if (arm == '上（-65°-65°）') {
    '_单个舵机运动' 13 degree
  } (arm == '中（-115°-70°）') {
    '_单个舵机运动' 14 degree
  } (arm == '下（-90°-105°）') {
    '_单个舵机运动' 15 degree
  }
}

to '获取机器狗版本' {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 2 80 15 149))
  '_串口结束'
  local 'rx_data' ('[serial:read]')
  if ((at 'last' rx_data) == 170) {
    return ('[data:makeList]' ('_conver2float' (at 6 rx_data) -70 50) ('_conver2float' (at 7 rx_data) -70 90) ('_conver2float' (at 8 rx_data) -30 30) ('_conver2float' (at 9 rx_data) -70 50) ('_conver2float' (at 10 rx_data) -70 90) ('_conver2float' (at 11 rx_data) -30 30) ('_conver2float' (at 12 rx_data) -70 50) ('_conver2float' (at 13 rx_data) -70 90) ('_conver2float' (at 14 rx_data) -30 30) ('_conver2float' (at 15 rx_data) -70 50) ('_conver2float' (at 16 rx_data) -70 90) ('_conver2float' (at 17 rx_data) -30 30) ('_conver2float' (at 18 rx_data) -65 65) ('_conver2float' (at 19 rx_data) -70 60) ('_conver2float' (at 20 rx_data) -90 105))
  } else {
    sayIt '通信失败！！！'
  }
}

to '表演模式' mode {
  if (mode == (booleanConstant true)) {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 3 1))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (13 + 1)) % 255))))
    '_串口结束'
  } else {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 3 0))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (13 + 0)) % 255))))
    '_串口结束'
  }
}

to '设置机械臂运动速度' pos {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 117 pos))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' 127 ('_conver2u8t' 0 255 pos)))))
  '_串口结束'
}

to '设置舵机运动速度' pos {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 92 pos))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ('_修正后的余数' 102 ('_conver2u8t' 0 255 pos)))))
  '_串口结束'
}

to '设置转动到角度' angle {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 10 1 63))
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((angle >> 8) & 255) (angle & 255) ((255 - (74 + ((angle & 255) + ((angle >> 8) & 255)))) % 256))))
  '_串口结束'
}

to '设置迈步频率为' mode {
  if (mode == '正常') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 61 0))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (71 + 0)) % 256))))
    '_串口结束'
  } (mode == '慢速') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 61 1))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (71 + 1)) % 256))))
    '_串口结束'
  } (mode == '快速') {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 61 2))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (71 + 2)) % 256))))
    '_串口结束'
  }
}

to '设置运动步态为' mode {
  if (mode == '对角') {
    '_运动步态' 0
  } (mode == '行走') {
    '_运动步态' 1
  } (mode == '高抬腿') {
    '_运动步态' 2
  } (mode == '微调') {
    '_运动步态' 3
  }
}

to '读取按键' button {
  if (button == 'A') {
    return (digitalReadOp 34)
  } (button == 'B') {
    return (digitalReadOp 35)
  }
}

to '读取机器狗电量' {
  _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 2 1 1 242))
  '_串口结束'
  local 'rx_data' ('[serial:read]')
  if ((at 'last' rx_data) == 170) {
    return (at 6 rx_data)
  } else {
    sayIt '通信失败！！！'
  }
}

to '读取第' foo {
  local 'var' foo
  forever {
    if (isType ('获取机器狗版本') 'list') {
      comment '获取不到舵机角度时返回对象不是列表'
      sayIt ('[data:joinStrings]' ('[data:copyFromTo]' ('获取机器狗版本') (1 + ((var - 1) * 3)) (3 + ((var - 1) * 3))) '|')
    }
    waitMillis 200
  }
}

to '陀螺仪' mode {
  if (mode == (booleanConstant true)) {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 97 1))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (107 + 1)) % 255))))
    '_串口结束'
  } else {
    _buffer = ('[data:asByteArray]' ('[data:makeList]' 85 0 9 1 97 0))
    _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('[data:makeList]' ((255 - (107 + 0)) % 255))))
    '_串口结束'
  }
}

