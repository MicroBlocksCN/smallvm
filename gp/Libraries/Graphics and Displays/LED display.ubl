module 'LED display'
author '英荔教育'
version 1 4 
choices led_imageMenu heart 'small heart' yes no happy sad confused angry asleep surprised silly fabulous meh 't-shirt' 'roller skate' duck house tortoise butterfly 'stick figure' ghost sword giraffe skull umbrella snake rabbit cow 'quarter note' 'eight note' pitchfork target triangle 'left triangle' 'chess board' diamond 'small diamond' square 'small square' scissors 
description ''
variables number pinNumber optionalHasWhite _neoPanel_isHorizontal _neoPanel_width _neoPanel_height hasWhite _np_pixels _Elite_Core_initialization _stop_scrolling_text delay optionalDelay r g b _text _text2 

  spec ' ' 'Elite_Core LED plot x' 'Elite_Core LED plot x _ y _ color _' 'auto auto color' 1 1
  spec ' ' 'Elite_Core LED unplot' 'Elite_Core LED unplot x _ y _' 'auto auto' 1 1
  space
  spec ' ' 'Elite_Core LED display image' 'Elite_Core LED display image _ color _' 'menu.led_imageMenu color' 'happy'
  space
  spec ' ' 'clear Elite_Core LED dispaly' 'clear Elite_Core LED dispaly'
  space
  spec ' ' 'Elite_Core LED set all color' 'Elite_Core LED set all color _' 'color'
  spec 'r' 'Elite_Core LED color' 'Elite_Core LED color r _ g _ b _ (0~255)' 'auto auto auto' 0 0 0
  spec 'r' 'Elite_Core LED random color' 'Elite_Core LED random color'
  space
  spec ' ' 'Elite_Core LED fill column' 'Elite_Core LED fill column _ color _' 'auto color' 1
  spec ' ' 'Elite_Core LED fill row' 'Elite_Core LED fill row _ color _' 'auto color' 1
  space
  spec ' ' 'Elite_Core LED stop scrolling' 'Elite_Core LED stop scrolling'
  spec ' ' 'Elite_Core LED character' 'Elite_Core LED character _ at x _ y _ color _' 'str auto auto color' 'A' 1 1
  spec ' ' 'Elite_Core LED scroll text' 'Elite_Core LED scroll text _ color _ : pausing _ ms' 'auto color auto' 'HELLO' nil 100
  space
  spec ' ' '_Elite_Core_initialization' '_Elite_Core_initialization'
  spec 'r' '_Elite_Core_index for x' '_Elite_Core_index for x _ y _' 'auto auto' 1 '10'
  spec ' ' '_Elite_Core_update' '_Elite_Core_update'
  spec ' ' '_set_Elite_Core' '_set_Elite_Core _ color _' 'auto color' '10'
  spec ' ' '_attach' '_attach _ led NeoPixel strip to pin _ has white _' 'auto auto bool' '10' '10' false
  spec ' ' '_attach2 NeoPixel panel width' '_attach NeoPixel panel width _ height _ pin _' 'auto auto auto' 5 5 12
  spec 'r' '_LED_imageData' '_LED_imageData'
  spec 'r' '_LED_imageData2' '_LED_imageData2'
  spec 'r' '_LED_namedimage' '_LED_namedimage _' 'menu.led_imageMenu' 'happy'

to 'Elite_Core LED character' text x0 y0 color {
  'clear Elite_Core LED dispaly'
  for letter text {
    local 'shape' ('[display:mbShapeForLetter]' letter)
    local 'mask' 1
    local 'x' (x0 - 1)
    local 'y' (y0 - 1)
    for c 5 {
      for f 5 {
        if ((shape & mask) != 0) {
          local 'i' ('_Elite_Core_index for x' (x + f) (y + c))
          if (i > 0) {
            atPut i _np_pixels color
          }
        }
        mask = (mask << 1)
      }
    }
    if _neoPanel_isHorizontal {
      x0 += 6
    } else {
      y0 += 6
    }
  }
  '_Elite_Core_update'
}

to 'Elite_Core LED color' r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to 'Elite_Core LED display image' imagename color {
  'clear Elite_Core LED dispaly'
  local 'image' imagename
  if (isType imagename 'string') {
    image = ('_LED_namedimage' imagename)
  }
  for i (size image) {
    '_set_Elite_Core' (at i image) color
  }
}

to 'Elite_Core LED fill column' x color {
  '_Elite_Core_initialization'
  if (and (x > 0) (x <= _neoPanel_height)) {
    if _neoPanel_isHorizontal {
      local 'index' x
      repeat (_neoPanel_width / 2) {
        atPut index _np_pixels color
        index += (((_neoPanel_height - x) * 2) + 1)
        atPut index _np_pixels color
        index += ((x * 2) - 1)
      }
      atPut index _np_pixels color
    } else {
      local 'index' (((x - 1) * _neoPanel_width) + 1)
      atPut index _np_pixels color
      repeat _neoPanel_width {
        atPut index _np_pixels color
        index += 1
      }
    }
    '_Elite_Core_update'
  }
}

to 'Elite_Core LED fill row' y color {
  '_Elite_Core_initialization'
  if (and (y > 0) (y <= _neoPanel_width)) {
    if _neoPanel_isHorizontal {
      local 'index' (((y - 1) * _neoPanel_height) + 1)
      repeat _neoPanel_height {
        atPut index _np_pixels color
        index += 1
      }
    } else {
      local 'index' ((_neoPanel_width - y) + 1)
      repeat (_neoPanel_height / 2) {
        atPut index _np_pixels color
        index += (((y - 1) * 2) + 1)
        atPut index _np_pixels color
        index += ((((_neoPanel_width - y) + 1) * 2) - 1)
      }
    }
    '_Elite_Core_update'
  }
}

to 'Elite_Core LED plot x' x y color {
  for i ('[data:makeList]' x y) {
    if (or (i > 5) (i < 1)) {
      sayIt 'x,y 的取值范围为 1-5'
      return 0
    }
  }
  '_Elite_Core_initialization'
  '_set_Elite_Core' ('_Elite_Core_index for x' x y) color
}

to 'Elite_Core LED random color' {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to 'Elite_Core LED scroll text' text color optionalDelay {
  '_Elite_Core_initialization'
  text = ('[data:join]' '' text)
  local 'delay' 150
  if ((pushArgCount) > 2) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  for position (((size text) * 6) + 6) {
    if (_stop_scrolling_text == (booleanConstant true)) {return 0}
    'clear Elite_Core LED dispaly'
    'Elite_Core LED character' text (6 - position) 1 color
    waitMillis delay
  }
}

to 'Elite_Core LED set all color' color {
  '_Elite_Core_initialization'
  fillList _np_pixels color
  '_Elite_Core_update'
}

to 'Elite_Core LED stop scrolling' {
  '_Elite_Core_initialization'
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  'clear Elite_Core LED dispaly'
}

to 'Elite_Core LED unplot' x y {
  for i ('[data:makeList]' x y) {
    if (or (i > 5) (i < 1)) {
      sayIt 'x,y 的取值范围为 1-5'
      return 0
    }
  }
  '_Elite_Core_initialization'
  'Elite_Core LED plot x' x y (colorSwatch 0 0 0 255)
}

to '_Elite_Core_index for x' x y {
  if (or (x < 1) (y < 1)) {return 0}
  if (or (x > _neoPanel_width) (y > _neoPanel_height)) {return 0}
  if _neoPanel_isHorizontal {
    if ((x & 1) == 0) {
      return (((x - 1) * _neoPanel_height) + ((_neoPanel_height - y) + 1))
    } else {
      return (((x - 1) * _neoPanel_height) + y)
    }
  } else {
    if ((y & 1) == 0) {
      return (((y - 1) * _neoPanel_width) + x)
    } else {
      return (((y - 1) * _neoPanel_width) + ((_neoPanel_width - x) + 1))
    }
  }
}

to '_Elite_Core_initialization' {
  if (_Elite_Core_initialization == 0) {
    '_attach2 NeoPixel panel width' 5 5 12
    _Elite_Core_initialization = 1
  }
}

to '_Elite_Core_update' {
  '[display:neoPixelSend]' _np_pixels
  waitMicros 300
}

to '_LED_imageData' {
  _text = 'happy:9,19,4,24,15,16,6;sad:9,19,7,14,17,5,25;heart:10,20,2,9,12,19,22,3,8,13,18,23,7,14,17,15;small heart:9, 19, 8, 13, 18, 14;yes:4, 6, 14, 18, 22;no:1,5,7,9,13,17,19,21,25;confused:9,19,7,17,5,15,25;angry:1,4,5,7,9,14,15,17,19,21,24,25;asleep:2,7,9,14,17,19,22;surprised:7,10,13,15,17,20;silly:1,3,8,13,16,17,18,21,23,24,25;fabulous:1,2,6,7,9,10,11,15,16,17,19,20,21,22;meh:1,6,10,14,18,20,21;t-shirt:1,2,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22;roller skate:3,4,6,7,8,13,14,16,17,18,19,20,21,22,23,24;duck:2,7,8,9,10,11,12,13,14,17,18,23;house:3,6,7,8,9,11,12,13,14,16,17,18,19,23;tortoise:3,7,8,9,12,13,17,18,19,23;butterfly:1, 2, 4, 5, 6, 7, 9, 10, 12, 13, 14, 16, 17, 19, 20, 21, 22, 24, 25;stick figure:2,5,7,9,11,12,13,17,19,22,25;ghost:2,3,4,5,7,8,10,11,12,13,14,15,17,18,20,22,23,24,25;sword:7,11,12,13,14,15,17;'
  return _text
}

to '_LED_imageData2' {
  _text2 = 'giraffe:1,6,7,8,9,10,14,16,17;skull:2,3,6,7,8,10,11,12,13,14,15,16,17,18,20,22,23;umbrella:2,4,6,9,10,11,12,13,14,15,19,20,22;snake:1,2,7,8,9,10,14,17,18,19,22;rabbit:1,2,3,4,5,6,7,8,11,12,13,15,16,17,18;cow:1,2,3,7,8,13,14,15,17,18,21,22,23;quarter note:4,5,6,7,11,12,13,14,15;eight note:4,5,6,7,11,12,13,14,15,19,23;pitchfork:1,2,3,8,11,12,13,14,15,18,21,22,23;target:3,7,8,9,11,12,14,15,17,18,19,23;triangle:4,7,8,12,14,17,18,24;left triangle:1,2,3,4,5,6,9,13,15,16,17,25;chess board:2,4,6,8,10,12,14,16,18,20,22,24;diamond:3,7,9,11,15,17,19,23;small diamond:8,12,14,18;square:1,2,3,4,5,6,10,11,15,16,20,21,22,23,24,25;small square:7,8,9,12,14,17,18,19;scissors:1,2,4,5,6,7,9,10,13,17,19,21,25;'
  return _text2
}

to '_LED_namedimage' name {
  local 'data' ('[data:join]' ('_LED_imageData') ('_LED_imageData2'))
  local 'i' ('[data:find]' name data)
  if (i == -1) {
    return 0
  }
  local 'start' (('[data:find]' ':' data i) + 1)
  local 'end' (('[data:find]' ';' data i) - 1)
  return ('[data:split]' ('[data:convertType]' ('[data:copyFromTo]' data start end) 'string') ',')
}

to '_attach' number pinNumber optionlHasWhite {
  hasWhite = false
  if ((pushArgCount) > 2) {
    hasWhite = optionalHasWhite
  }
  if (or (_np_pixels == 0) (number != (size _np_pixels))) {
    _np_pixels = (newList number)
  }
  fillList _np_pixels 0
  '[display:neoPixelSetPin]' pinNumber hasWhite
}

to '_attach2 NeoPixel panel width' width height pin {
  _neoPanel_width = width
  _neoPanel_height = height
  _neoPanel_isHorizontal = (width >= height)
  '_attach' (_neoPanel_width * _neoPanel_height) pin false
}

to '_set_Elite_Core' i color {
  if (and (1 <= i) (i <= (size _np_pixels))) {
    atPut i _np_pixels color
    '_Elite_Core_update'
  }
}

to 'clear Elite_Core LED dispaly' {
  '_Elite_Core_initialization'
  fillList _np_pixels 0
  '_Elite_Core_update'
}

