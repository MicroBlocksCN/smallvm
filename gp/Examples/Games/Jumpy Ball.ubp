module main
author unknown
version 1 0 
description ''
variables 'ball speed' 'ball y' 'pipe height' 'pipe x' playing 'previous ball y' score 'ball radius' 'pipe width' gap 'ball acceleration' 

  spec ' ' 'check buttons' 'check buttons'
  spec ' ' 'check collision' 'check collision'
  spec ' ' 'draw ball' 'draw ball'
  spec ' ' 'draw pipes' 'draw pipe'
  spec ' ' 'game over' 'game over'
  spec ' ' 'new game' 'new game'
  spec ' ' 'step ball' 'step ball'
  spec ' ' 'step pipe' 'step pipe'
  spec ' ' 'welcome screen' 'welcome screen'
  spec 'r' 'button pressed' 'button pressed'
  spec ' ' 'write' 'write _ centered at scale _ y _ color _' 'str auto auto color' 'Hello!' 3 '10'

to 'button pressed' {
  return (or (or (buttonA) (buttonB)) (or ('OK button') ('cancel button')))
}

to 'check buttons' {
  if (and playing ('button pressed')) {
    'ball speed' = 0
    'ball y' += ((v 'ball acceleration') * -10)
  }
}

to 'check collision' {
  if (and ((v 'pipe x') <= (v 'pipe width')) (or ((((v 'ball y') / 10) + (v 'ball radius')) >= ((v 'pipe height') + gap)) ((((v 'ball y') / 10) - (v 'ball radius')) <= (v 'pipe height')))) {playing = (booleanConstant false)}
}

to 'draw ball' {
  '[tft:circle]' (v 'ball radius') ((v 'previous ball y') / 10) ((v 'ball radius') + 1) 0 true
  '[tft:circle]' (v 'ball radius') ((v 'ball y') / 10) (v 'ball radius') 65535 true
}

to 'draw pipes' {
  '[tft:rect]' ((v 'pipe x') + (v 'pipe width')) 0 (v 'pipe width') (v 'pipe height') 0 true
  '[tft:rect]' (v 'pipe x') 0 (v 'pipe width') (v 'pipe height') 65280 true
  '[tft:rect]' ((v 'pipe x') + (v 'pipe width')) ((v 'pipe height') + gap) (v 'pipe width') (('[tft:getHeight]') - ((v 'pipe height') + gap)) 0 true
  '[tft:rect]' (v 'pipe x') ((v 'pipe height') + gap) (v 'pipe width') (('[tft:getHeight]') - ((v 'pipe height') + gap)) 65280 true
}

to 'game over' {
  '[display:mbDisplayOff]'
  write 'GAME' (('[tft:getHeight]') / 30) (('[tft:getHeight]') / 15) (colorSwatch 255 255 255 255)
  write 'OVER' (('[tft:getHeight]') / 30) (('[tft:getHeight]') / 3) (colorSwatch 255 255 255 255)
  write ('[data:join]' 'SCORE:' score) (('[tft:getHeight]') / 80) (('[tft:getHeight]') - (('[tft:getHeight]') / 3)) (colorSwatch 255 255 255 255)
}

to 'new game' {
  '[display:mbDisplayOff]'
  score = 0
  comment 'ball y is multiplied by 10 for precision'
  'ball y' = ((('[tft:getHeight]') / 2) * 10)
  playing = (booleanConstant true)
  'ball acceleration' = (('[tft:getHeight]') / 60)
  'ball speed' = (('[tft:getHeight]') / 60)
  'ball radius' = (('[tft:getHeight]') / 15)
  gap = (random ((v 'ball radius') * 4) ((v 'ball radius') * 7))
  'pipe x' = (('[tft:getWidth]') - (('[tft:getWidth]') / 5))
  'pipe height' = (random ((v 'ball radius') * 2) ((v 'ball radius') * 10))
  'pipe width' = ((v 'ball radius') * 2)
}

to 'step ball' {
  'ball speed' += (v 'ball acceleration')
  if ((v 'ball y') < 0) {
    'ball y' = ((v 'ball y') * (v 'ball speed'))
  }
  'previous ball y' = (v 'ball y')
  'ball y' += (v 'ball speed')
  if ((v 'ball y') > (('[tft:getHeight]') * 10)) {
    playing = (booleanConstant false)
  }
  'check buttons'
}

to 'step pipe' {
  'pipe x' += ((score / -10) - (('[tft:getWidth]') / 120))
  if ((v 'pipe x') < (((v 'pipe width') * -1) - 2)) {
    'pipe x' = ('[tft:getWidth]')
    'pipe height' = (random ((v 'ball radius') * 2) ((v 'ball radius') * 10))
    score += 1
  }
}

to 'welcome screen' {
  '[display:mbDisplayOff]'
  write 'JUMPY' (('[tft:getHeight]') / 30) (('[tft:getHeight]') / 15) (colorSwatch 244 36 215 255)
  write 'BALL' (('[tft:getHeight]') / 30) (('[tft:getHeight]') / 3) (colorSwatch 244 36 215 255)
  write 'Press OK or A' (('[tft:getHeight]') / 120) (('[tft:getHeight]') - (('[tft:getHeight]') / 4)) (colorSwatch 255 255 255 255)
  write 'to play' (('[tft:getHeight]') / 120) (('[tft:getHeight]') - (('[tft:getHeight]') / 8)) (colorSwatch 255 255 255 255)
}

to write text scale y color {
  local 'width' (((scale * 6) * (size text)) - scale)
  '[tft:text]' text ((('[tft:getWidth]') - width) / 2) y color scale false
}

script 94 52 {
whenStarted
'welcome screen'
forever {
  waitUntil ('button pressed')
  'new game'
  repeatUntil (not playing) {
    'step ball'
    'draw ball'
    'step pipe'
    'draw pipes'
    'check collision'
    waitMillis 10
  }
  'game over'
  waitUntil (not ('button pressed'))
}
}


module 'ED1 Buttons' Input
author MicroBlocks
version 1 0 
tags button capacitive ed1 
description 'Provides blocks for the six capacitive buttons in the Citilab ED1 board.'
variables _ED1_buttons_init '_capacitive threshold' 

  spec ' ' '_ED1_buttons_init' '_ED1_buttons_init' 'any any any'
  spec 'r' 'OK button' 'button OK'
  spec 'r' 'cancel button' 'button X'
  spec 'r' 'up button' 'button up'
  spec 'r' 'down button' 'button down'
  spec 'r' 'left button' 'button left'
  spec 'r' 'right button' 'button right'
  spec ' ' 'set capacitive threshold to' 'set capacitive threshold to _' 'auto' 16

to 'OK button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 15) < (v '_capacitive threshold'))
}

to '_ED1_buttons_init' {
  if (_ED1_buttons_init == 0) {
    if ((v '_capacitive threshold') == 0) {'_capacitive threshold' = 16}
    _ED1_buttons_init = (booleanConstant true)
  }
}

to 'cancel button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 14) < (v '_capacitive threshold'))
}

to 'down button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 13) < (v '_capacitive threshold'))
}

to 'left button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 2) < (v '_capacitive threshold'))
}

to 'right button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 27) < (v '_capacitive threshold'))
}

to 'set capacitive threshold to' threshold {
  '_capacitive threshold' = threshold
}

to 'up button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 4) < (v '_capacitive threshold'))
}


module TFT Output
author MicroBlocks
version 1 5 
description 'Draw graphics and write text on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'

  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[tft:rect]' 'draw rectangle on TFT at x _ y _ width _ height _ color _ : filled _' 'num num num num color bool' 10 10 40 30 nil true
  spec ' ' '[tft:roundedRect]' 'draw rounded rectangle on TFT at x _ y _ width _ height _ radius _ color _ : filled _' 'num num num num num color bool' 10 10 40 30 8 nil true
  spec ' ' '[tft:circle]' 'draw circle on TFT at x _ y _ radius _ color _ : filled _' 'num num num color bool' 40 40 30 nil true
  spec ' ' '[tft:triangle]' 'draw triangle on TFT at x _ y _ , x _ y _ , x _ y _ color _ : filled _' 'num num num num num num color bool' 20 20 30 80 60 5 nil true
  spec ' ' '[tft:text]' 'write _ on TFT at x _ y _ color _ : scale _ wrap _' 'str num num color num bool' 'Hello World!' 5 5 nil 2 true
  spec ' ' '[tft:line]' 'draw line on TFT from x _ y _ to x _ y _ color _' 'num num num num color' 12 8 25 15
  spec ' ' '[tft:setPixel]' 'set TFT pixel x _ y _ to _' 'num num color' 10 10
  space
  spec 'r' 'makeColor' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'makeGray' 'gray _ %' 'num' 50
  spec 'r' 'randomColor' 'random color'
  space
  spec 'r' '[tft:getWidth]' 'TFT width'
  spec 'r' '[tft:getHeight]' 'TFT height'
  space
  spec ' ' '[tft:setBacklight]' 'set TFT backlight _ (0-10)' 'num' 10
  space
  spec ' ' '_deferMonochromeDisplayUpdates' '_defer monochrome display updates'
  spec ' ' '_resumeMonochromeDisplayUpdates' '_resume monochrome display updates'

to '_deferMonochromeDisplayUpdates' {
  '[tft:deferUpdates]'
}

to '_resumeMonochromeDisplayUpdates' {
  '[tft:resumeUpdates]'
}

to makeColor r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to makeGray percent {
  gray = ((percent * 255) / 100)
  gray = (maximum 0 (minimum gray 255))
  return ((gray << 16) | ((gray << 8) | gray))
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

