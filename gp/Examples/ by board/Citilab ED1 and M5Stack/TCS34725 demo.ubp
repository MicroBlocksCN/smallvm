module main
author 'José García Yeste'
version 1 0 
description ''

  spec ' ' 'draw color' 'write color info _' 'auto' 0

to 'draw color' color {
  local 'r' ((color >> 16) & 31)
  local 'g' ((color >> 8) & 31)
  local 'b' (color & 31)
  '[tft:rect]' 4 2 52 52 (colorSwatch 255 255 255 255) false
  '[tft:rect]' 5 3 50 50 color true
  '[tft:text]' ('[data:join]' 'R:' r) 64 3 (colorSwatch 249 140 71 255) 2 true
  '[tft:text]' ('[data:join]' 'G:' g) 64 21 (colorSwatch 252 168 127 255) 2 true
  '[tft:text]' ('[data:join]' 'B:' b) 64 40 (colorSwatch 251 168 132 255) 2 true
  color = (color color)
  if (color == '') {
    color = '?'
  }
  '[tft:line]' 4 72 124 72 (colorSwatch 250 154 77 255)
  '[tft:text]' 'Color name' 4 64 (colorSwatch 251 148 91 255) 1 true
  '[tft:text]' color (64 - ((size color) * 6)) 79 (colorSwatch 251 140 69 255)
}

script 50 54 {
whenStarted
forever {
  local 'color' ('TCS34725 rgb')
  local 'luminance' ('[data:join]' '' ('TCS34725 luminance'))
  '[display:mbDisplayOff]'
  'draw color' color
  '[tft:line]' 4 106 124 106 (colorSwatch 240 168 145 255)
  '[tft:text]' 'Luminance ' 4 98 (colorSwatch 251 148 91 255) 1 true
  '[tft:text]' luminance (64 - (6 * (size luminance))) 112 (colorSwatch 251 148 91 255)
  waitMillis 100
}
}


module TCS34725 Input
author 'José García Yeste'
version 1 3 
tags sensor color 
description 'Support for the TCS34725 RGB color sensor.
'
variables '_TCS34725 initalized' 

  spec 'r' 'TCS34725 connected' 'TCS34725 connected'
  spec 'r' 'TCS34725 rgb' 'TCS34725 rgb'
  spec 'r' 'TCS34725 luminance' 'TCS34725 luminance'
  spec 'r' 'color' 'color _ name' 'color'
  spec ' ' '_TCS34725 setup' '_TCS34725 setup'
  spec 'r' '_TCS34725 raw' '_TCS34725 raw'

to 'TCS34725 connected' {
  return ((i2cGet (hexToInt '29') (hexToInt '92')) == (hexToInt '44'))
}

to 'TCS34725 luminance' {
  local 'crgb' ('_TCS34725 raw')
  local 'r' (at 2 crgb)
  local 'g' (at 3 crgb)
  local 'b' (at 4 crgb)
  comment '(-0.32466 * r) + (1.57837 * g) + (-0.73191 * b);'
  return (maximum 0 ((((r * -3246) + (g * 15784)) + (b * -7319)) / 10000))
}

to 'TCS34725 rgb' {
  local 'raw' ('_TCS34725 raw')
  local 'rgb' (newList 3)
  local 'c' (at 1 raw)
  if (c > 0) {
    for i 3 {
      atPut i rgb (((at (i + 1) raw) * 255) / c)
    }
    return (((at 1 rgb) << 16) | (((at 2 rgb) << 8) | (at 3 rgb)))
  } else {
    return 0
  }
}

to '_TCS34725 raw' {
  '_TCS34725 setup'
  comment 'read 8 bytes c,r,g,b'
  local 'crgb' (newList 8)
  if ('TCS34725 connected') {
    '[sensors:i2cWrite]' (hexToInt '29') (hexToInt '94')
    '[sensors:i2cRead]' (hexToInt '29') crgb
    waitMillis 1
    atPut 1 crgb (((at 2 crgb) << 8) | (at 1 crgb))
    atPut 2 crgb (((at 4 crgb) << 8) | (at 3 crgb))
    atPut 3 crgb (((at 6 crgb) << 8) | (at 5 crgb))
    atPut 4 crgb (((at 8 crgb) << 8) | (at 7 crgb))
  }
  return crgb
}

to '_TCS34725 setup' {
  if ((v '_TCS34725 initialized') == 0) {
    comment 'https://github.com/ControlEverythingCommunity/TCS34725/blob/master/C/TCS34725.c
// Select enable register(0x80)
// Power ON, crgbC enable, wait time disable(0x03)'
    i2cSet (hexToInt '29') (hexToInt '80') 3
    comment '// Select ALS time register(0x81)
// Atime = 700 ms(0x00)'
    i2cSet (hexToInt '29') (hexToInt '81') 0
    comment '// Select Wait Time register(0x83)
// WTIME : 0.154ms(0xC0)'
    i2cSet (hexToInt '29') (hexToInt '83') (hexToInt 'C0')
    comment '// Select control register(0x8F)
// AGAIN = 1x(0x00)'
    i2cSet (hexToInt '29') (hexToInt '8F') 0
    waitMillis 200
    '_TCS34725 initialized' = 1
  }
}

to color color {
  local 'r' ((color >> 16) & 255)
  local 'g' ((color >> 8) & 255)
  local 'b' (color & 255)
  if (and (r > (g + 30)) (r > (b + 30))) {
    return 'Red'
  }
  if (and (g > (b + 30)) (g > (r + 30))) {
    return 'Green'
  }
  if (and (b > (r + 30)) (b > (g + 30))) {
    return 'Blue'
  }
  if (and (r > (b + 15)) (g > (b + 15))) {
    return 'Yellow'
  }
  if (and (r > (g + 15)) (b > (g + 15))) {
    return 'Magenta'
  }
  if (and (g > (r + 15)) (b > (r + 15))) {
    return 'Cyan'
  }
  return ''
}


module TFT Output
author MicroBlocks
version 1 5 
description 'Draw graphics and write text on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'

  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[tft:rect]' 'draw rectangle on TFT at x _ y _ width _ height _ color _ : filled _' 'num num num num color bool' 10 10 40 30 nil true
  spec ' ' '[tft:roundedRect]' 'draw rounded rectangle on TFT at x _ y _ width _ height _ radius _ color _ : filled _' 'num num num num num color bool' 10 10 40 30 8 nil true
  spec ' ' '[tft:circle]' 'draw circle on TFT at x _ y _ radius _ color _ : filled _' 'num num num color bool' 40 40 30 nil true
  spec ' ' '[tft:triangle]' 'draw triangle on TFT at x _ y _ , x _ y _ , x _ y _ color _ : filled _' 'num num num num num num color bool' 20 20 30 80 60 5 nil true
  spec ' ' '[tft:text]' 'write _ on TFT at x _ y _ color _ : scale _ wrap _' 'str num num color num bool' 'Hello World!' 5 5 nil 2 true
  spec ' ' '[tft:line]' 'draw line on TFT from x _ y _ to x _ y _ color _' 'num num num num color' 12 8 25 15
  spec ' ' '[tft:setPixel]' 'set TFT pixel x _ y _ to _' 'num num color' 10 10
  space
  spec 'r' 'makeColor' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'makeGray' 'gray _ %' 'num' 50
  spec 'r' 'randomColor' 'random color'
  space
  spec 'r' '[tft:getWidth]' 'TFT width'
  spec 'r' '[tft:getHeight]' 'TFT height'
  space
  spec ' ' '[tft:setBacklight]' 'set TFT backlight _ (0-10)' 'num' 10
  space
  spec ' ' '_deferMonochromeDisplayUpdates' '_defer monochrome display updates'
  spec ' ' '_resumeMonochromeDisplayUpdates' '_resume monochrome display updates'

to '_deferMonochromeDisplayUpdates' {
  '[tft:deferUpdates]'
}

to '_resumeMonochromeDisplayUpdates' {
  '[tft:resumeUpdates]'
}

to makeColor r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to makeGray percent {
  gray = ((percent * 255) / 100)
  gray = (maximum 0 (minimum gray 255))
  return ((gray << 16) | ((gray << 8) | gray))
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

