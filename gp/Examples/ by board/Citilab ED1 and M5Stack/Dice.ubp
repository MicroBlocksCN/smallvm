module main
author unknown
version 1 0 
description ''

  spec ' ' 'dice' 'draw die _' 'auto' 6
  spec ' ' 'draw dot x' 'draw dot x _ y _' 'auto auto' 10 '10'

to dice num {
  '[tft:roundedRect]' 16 16 96 96 8 -1 true
  if (num <= 6) {
    if (or (or (num == 1) (num == 3)) (num == 5)) {'draw dot x' 64 64}
    if (num >= 2) {
      'draw dot x' 96 32
      'draw dot x' 32 96
    }
    if (num >= 4) {
      'draw dot x' 32 32
      'draw dot x' 96 96
    }
    if (num == 6) {
      'draw dot x' 32 64
      'draw dot x' 96 64
    }
  }
}

to 'draw dot x' x y {
  '[tft:circle]' x y 10 0 true
}

script 169 50 {
comment '    By José García Yeste - Citilab
===========================
Motion and TFT library demo.

Wait for the ED1 to say "Shake!", then
shake it to roll a die.'
}

script 50 113 {
whenStarted
repeat 12 {
  local 'ignore' (motion)
}
forever {
  '[display:mbDisplayOff]'
  dice 0
  '[tft:text]' 'Shake!' 32 56 0 2 false
  waitUntil ((motion) > 12)
  local 'tilt' 0
  repeat 10 {
    tilt = (maximum tilt (absoluteValue (motion)))
    waitMillis 30
  }
  tilt = (minimum 60 (tilt / 2))
  if (tilt > 5) {
    repeatUntil (tilt <= 0) {
      local 'delay' (('[misc:sin]' (100 * (60 - tilt))) / 100)
      dice (random 1 6)
      waitMillis delay
      'play frequency' 261 5
      tilt += -1
    }
  } else {
    dice 0
  }
  waitMillis 2000
}
}


module Motion Input
author MicroBlocks
version 1 1 
tags acceleration steps motion accelerometer 
description 'Count steps and detect motion in boards with a built-in accelerometer, such as the micro:bit, the Calliope, the Citilab ED1 or the Circuit Playground Express.'
variables _motionSamples _stepCount _stepThreshold _stepMotionHigh 

  spec ' ' 'startStepCounter' 'start step counter'
  spec 'r' 'stepCount' 'step count'
  spec ' ' 'clearStepCount' 'clear step count'
  spec ' ' 'setStepThreshold' 'set step threshold _ (0-50)' 'auto' 10
  spec 'r' 'motion' 'motion'
  spec ' ' '_addSample' '_addSample _' 'auto' '10'
  spec 'r' '_recentAverage' '_recentAverage'
  spec ' ' '_stepCounterLoop' '_stepCounterLoop'

to '_addSample' s {
  if (0 == _motionSamples) {_motionSamples = (newList 12)}
  for i ((size _motionSamples) - 1) {
    atPut i _motionSamples (at (i + 1) _motionSamples)
  }
  atPut (size _motionSamples) _motionSamples s
}

to '_recentAverage' {
  if (0 == _motionSamples) {return 0}
  local 'count' (size _motionSamples)
  local 'total' 0
  for i count {
    total += (at i _motionSamples)
  }
  return (total / count)
}

to '_stepCounterLoop' {
  if (_stepThreshold == 0) {_stepThreshold = 15}
  forever {
    local 'n' (motion)
    if (n > _stepThreshold) {
      if (not _stepMotionHigh) {
        _stepMotionHigh = (booleanConstant true)
        _stepCount += 1
        sendBroadcast 'step'
      }
    } (n < -3) {
      _stepMotionHigh = (booleanConstant false)
    }
    waitMillis 10
  }
}

to clearStepCount {
  _stepCount = 0
}

to motion {
  comment 'Return the change in acceleration since the last call.'
  comment 'Details: The value is the difference between the current
acceleration and the average value of the last N samples.
The result is zero when there are no changes of acceleration.
It goes positive momentarily when the acceleration decreases
(e.g. because the microcontroller is in free fall) and positive
when the acceleration increases (e.g. when the falling micro-
controller is caught).'
  local 'current' ('[sensors:acceleration]')
  local 'result' (current - ('_recentAverage'))
  '_addSample' current
  if ((absoluteValue result) < 3) {
    comment 'Suppress sensor noise'
    result = 0
  }
  return result
}

to setStepThreshold threshold {
  comment 'The lower the threshold, the more sensitive the
step counter is. If the threshold is too low, it will
count extra steps. If it is too high, it will miss steps.'
  _stepThreshold = (threshold + 5)
}

to startStepCounter {
  comment 'Reset the step count to zero and start the
step counter loop.'
  _stepCount = 0
  sendBroadcast '_stepCounterLoop'
}

to stepCount {
  return _stepCount
}


module TFT Output
author MicroBlocks
version 1 5 
description 'Draw graphics and write text on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'

  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[tft:rect]' 'draw rectangle on TFT at x _ y _ width _ height _ color _ : filled _' 'num num num num color bool' 10 10 40 30 nil true
  spec ' ' '[tft:roundedRect]' 'draw rounded rectangle on TFT at x _ y _ width _ height _ radius _ color _ : filled _' 'num num num num num color bool' 10 10 40 30 8 nil true
  spec ' ' '[tft:circle]' 'draw circle on TFT at x _ y _ radius _ color _ : filled _' 'num num num color bool' 40 40 30 nil true
  spec ' ' '[tft:triangle]' 'draw triangle on TFT at x _ y _ , x _ y _ , x _ y _ color _ : filled _' 'num num num num num num color bool' 20 20 30 80 60 5 nil true
  spec ' ' '[tft:text]' 'write _ on TFT at x _ y _ color _ : scale _ wrap _' 'str num num color num bool' 'Hello World!' 5 5 nil 2 true
  spec ' ' '[tft:line]' 'draw line on TFT from x _ y _ to x _ y _ color _' 'num num num num color' 12 8 25 15
  spec ' ' '[tft:setPixel]' 'set TFT pixel x _ y _ to _' 'num num color' 10 10
  space
  spec 'r' 'makeColor' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'makeGray' 'gray _ %' 'num' 50
  spec 'r' 'randomColor' 'random color'
  space
  spec 'r' '[tft:getWidth]' 'TFT width'
  spec 'r' '[tft:getHeight]' 'TFT height'
  space
  spec ' ' '[tft:setBacklight]' 'set TFT backlight _ (0-10)' 'num' 10
  space
  spec ' ' '_deferMonochromeDisplayUpdates' '_defer monochrome display updates'
  spec ' ' '_resumeMonochromeDisplayUpdates' '_resume monochrome display updates'

to '_deferMonochromeDisplayUpdates' {
  '[tft:deferUpdates]'
}

to '_resumeMonochromeDisplayUpdates' {
  '[tft:resumeUpdates]'
}

to makeColor r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to makeGray percent {
  gray = ((percent * 255) / 100)
  gray = (maximum 0 (minimum gray 255))
  return ((gray << 16) | ((gray << 8) | gray))
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}


module Tone Output
author MicroBlocks
version 1 8 
tags tone sound music audio note speaker 
choices tone_NoteName c 'c#' d 'd#' e f 'f#' g 'g#' a 'a#' b 
description 'Audio tone generation. Make music with MicroBlocks!'
variables _tonePin _toneInitalized _toneLoopOverhead _toneNoteNames _toneArezzoNotes _toneFrequencies 

  spec ' ' 'play tone' 'play note _ octave _ for _ ms' 'str.tone_NoteName num num' 'c' 0 500
  spec ' ' 'playMIDIKey' 'play midi key _ for _ ms' 'num num' 60 500
  spec ' ' 'play frequency' 'play frequency _ for _ ms' 'num num' 261 500
  spec ' ' 'startTone' 'start tone _ Hz' 'num' 440
  spec ' ' 'stopTone' 'stop tone'
  spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
  spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
  spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
  spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
  spec ' ' '_toneLoop' '_toneLoop _ for _ ms' 'num num' 440000 100
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  local 'normalized note' ('_trimmedLowercase' note)
  if (_toneNoteNames == 0) {
    _toneNoteNames = ('[data:makeList]' 'c' 'c#' 'd' 'd#' 'e' 'f' 'f#' 'g' 'g#' 'a' 'a#' 'b' 'c_' 'db' 'd_' 'eb' 'e_' 'e#' 'f_' 'gb' 'g_' 'ab' 'a_' 'bb' 'b_' 'b#')
    _toneArezzoNotes = ('[data:makeList]' 'do' 'do#' 're' 're#' 'mi' 'fa' 'fa#' 'sol' 'sol#' 'la' 'la#' 'si' 'do_' 'dob' 're_' 'reb' 'mi_' 'mi#' 'fa_' 'solb' 'sol_' 'lab' 'la_' 'sib' 'si_' 'si#')
  }
  if (('[data:find]' (v 'normalized note') _toneArezzoNotes) > 0) {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneArezzoNotes))
  } else {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneNoteNames))
  }
}

to '_baseFreqForSemitone' semitone {
  if (_toneFrequencies == 0) {_toneFrequencies = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)}
  if (and (1 <= semitone) (semitone <= (size _toneFrequencies))) {
    return (at semitone _toneFrequencies)
  } else {
    comment 'Bad note name; return 10 Hz'
    return 10000
  }
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } ((boardType) == 'M5StickC') {
      _tonePin = 26
    } ((boardType) == 'Calliope') {
      digitalWriteOp 23 true
      digitalWriteOp 24 true
      _tonePin = 25
    } ((boardType) == 'D1-Mini') {
      _tonePin = 12
    } else {
      _tonePin = -1
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' ((key % 12) + 1))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to startTone freq {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {'[io:playTone]' _tonePin freq}
}

to stopTone {
  startTone 0
}

