module main
author wwj718
version 1 0 
description ''
variables event 

script 53 40 {
whenStarted
comment '1. connect wifi'
wifiConnect 'Network_Name' ''
waitMillis 1000
comment '2. connect MQTT broker'
'MQTT connect to' 'mqtt.aimaker.space' 128 '' 'guest' 'test'
sendBroadcast 'loop'
}

script 83 268 {
comment 'subscribe topic'
'MQTT sub' 'testTopic'
}

script 300 270 {
comment 'publish topic payload'
'MQTT pub' 'testTopic' 'Hello!'
}

script 73 355 {
whenBroadcastReceived 'loop'
comment 'receive mqtt message'
forever {
  if ('MQTT connected') {
    event = ('[net:MQTTLastEvent]')
    if (isType event 'list') {
      sayIt 'topic' ('MQTT event topic' event) ', payload' ('MQTT event payload' event)
    }
  } else {
    sayIt 'try to connect ...'
    waitMillis 500
    'MQTT connect to' 'mqtt.aimaker.space' 128 '' 'guest' 'test'
  }
}
}


module MQTT Comm
author wwj718
version 1 6 
depends WiFi 
tags mqtt network 
description 'A simple MQTT client.
'

  spec ' ' 'MQTT connect to' 'MQTT connect to broker _ : buffer sizes _ client id _ : username _ password _' 'str num str str str' '' 128 '' '' ''
  spec 'r' 'MQTT connected' 'MQTT connected'
  spec ' ' 'MQTT disconnect' 'MQTT disconnect'
  spec ' ' 'MQTT sub' 'MQTT sub _ : QoS _' 'str num' 'testTopic' 0
  spec ' ' 'MQTT unsub' 'MQTT unsub _' 'str' 'testTopic'
  spec ' ' 'MQTT pub' 'MQTT pub topic _ payload _ : retain _ QoS _' 'str auto bool num' 'testTopic' 'Hello!' false 0
  spec 'r' '[net:MQTTLastEvent]' 'MQTT event : binary _' 'bool' false
  spec 'r' 'MQTT event topic' 'topic for MQTT event _' 'str' ''
  spec 'r' 'MQTT event payload' 'payload for MQTT event _' 'str' ''
  spec ' ' '_MQTT set will' 'MQTT set will topic _ payload _ : retain _ QoS _ : buffer sizes _' 'str auto bool num num' 'testWill' 'Last will!' false 0 128

to 'MQTT connect to' broker buffer_sizes client_id username password {
  if ((getIPAddress) != '0.0.0.0') {
    if ((pushArgCount) == 1) {
      callCustomCommand '[net:MQTTConnect]' ('[data:makeList]' broker 128 ('[net:myMAC]'))
    } ((pushArgCount) == 3) {
      callCustomCommand '[net:MQTTConnect]' ('[data:makeList]' broker buffer_sizes client_id)
    } else {
      callCustomCommand '[net:MQTTConnect]' ('[data:makeList]' broker buffer_sizes client_id username password)
    }
    if ('MQTT connected') {
      sayIt 'Connected!'
    } else {
      sayIt 'Not Connected'
    }
  } else {
    sayIt 'Not Connected'
  }
}

to 'MQTT connected' {
  return (callCustomReporter '[net:MQTTIsConnected]')
}

to 'MQTT disconnect' {
  callCustomCommand '[net:MQTTdisconnect]'
}

to 'MQTT event payload' event {
  if (and (isType event 'list') ((size event) > 1)) {
    comment 'Join to empty string converts byte array to string'
    return ('[data:join]' '' (at 2 event))
  } else {
    return ''
  }
}

to 'MQTT event topic' event {
  if (and (isType event 'list') ((size event) > 1)) {
    return (at 1 event)
  } else {
    return ''
  }
}

to 'MQTT pub' topic payload retain qos {
  if ((pushArgCount) < 4) {
    okay = (callCustomReporter '[net:MQTTPub]' ('[data:makeList]' topic payload))
  } else {
    okay = (callCustomReporter '[net:MQTTPub]' ('[data:makeList]' topic payload retain qos))
  }
  if (not okay) {
    sayIt 'pub failure!'
  }
}

to 'MQTT sub' topic qos {
  if ((pushArgCount) < 2) {
    okay = (callCustomReporter '[net:MQTTSub]' ('[data:makeList]' topic))
  } else {
    okay = (callCustomReporter '[net:MQTTSub]' ('[data:makeList]' topic qos))
  }
  if (not okay) {
    sayIt 'sub failure!'
  }
}

to 'MQTT unsub' topic {
  if ((callCustomReporter '[net:MQTTUnsub]' ('[data:makeList]' topic)) != (booleanConstant true)) {sayIt 'unsub failure!'}
}

to '_MQTT set will' topic payload retain qos buffer_sizes {
  if ('MQTT connected') {
    sayIt 'set will has to be called before calling connect'
    return ''
  }
  if ((pushArgCount) < 4) {
    okay = (callCustomReporter '[net:MQTTSetWill]' ('[data:makeList]' topic payload))
  } ((pushArgCount) == 4) {
    okay = (callCustomReporter '[net:MQTTSetWill]' ('[data:makeList]' topic payload retain qos))
  } else {
    okay = (callCustomReporter '[net:MQTTSetWill]' ('[data:makeList]' topic payload retain qos buffer_sizes))
  }
  if (not okay) {
    sayIt 'set will failure!'
  }
}


module WiFi Comm
author MicroBlocks
version 1 8 
tags communication network 
description 'Connect to a WiFi network. Used in conjunction with other network libraries, such as HTTP client, HTTP server or Web Thing.
'

  spec ' ' 'wifiConnect' 'wifi connect to _ password _ : IP _ gateway _ subnet _' 'str str auto auto auto' 'Network_Name' '' '192.168.1.42' '192.168.1.1' '255.255.255.0'
  spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
  space
  spec 'r' 'getIPAddress' 'IP address'
  spec 'r' '[net:myMAC]' 'MAC address'
  space
  spec ' ' '[net:allowWiFiAndBLE]' 'allow WiFi while using BLE _' 'bool' true

to getIPAddress {
  return ('[net:myIPAddress]')
}

to wifiConnect ssid password fixedIP gatewayIP subnetIP {
  if (not ('[net:hasWiFi]')) {return}
  '[net:stopWiFi]'
  if ((pushArgCount) < 5) {
    '[net:startWiFi]' ssid password
  } else {
    '[net:startWiFi]' ssid password false fixedIP gatewayIP subnetIP
  }
  local 'startMSecs' (millisOp)
  repeatUntil (('[net:myIPAddress]') != '0.0.0.0') {
    comment 'Timeout after N seconds'
    if (((millisOp) - startMSecs) > 30000) {
      sayIt 'Could not connect'
      return 0
    }
    comment 'Slow blink while trying to connect'
    setUserLED true
    waitMillis 300
    setUserLED false
    waitMillis 300
  }
  repeat 6 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  if ((size password) < 8) {
    sayIt 'Password must be at least 8 characters'
    return 0
  }
  '[net:startWiFi]' ssid password true
  if ('Connected' != ('[net:wifiStatus]')) {
    sayIt 'Could not create hotspot'
    return 0
  }
  repeat 6 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

