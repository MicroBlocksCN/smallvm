module main
author MicroBlocks
version 1 0 
description 'Signada is a network protocol for remote control of microcontrollers'
variables password SSID mode event 'HTTP portal' 

  spec ' ' 'handle HTTP portal' 'handle HTTP portal'
  spec 'r' 'configPage' 'config page'
  spec ' ' 'connection' 'check credentials and connect'
  spec ' ' 'extract credentials from path' 'extract credentials from _' 'auto' ''
  spec ' ' 'savewifi' 'save WiFi SSID _ password _ mode _' 'auto auto auto' '' '' '10'
  spec ' ' 'showConnectionInfo' 'show connection info'
  spec ' ' 'process event' 'process event'
  spec ' ' 'set display' 'set display _' 'auto' ''
  spec ' ' 'clear' 'clear'
  spec 'r' 'get pin' 'get pin _ _' 'auto auto' '10' '10'
  spec 'r' 'sensor' 'sensor _' 'auto' 'acceleration'
  spec ' ' 'set led' 'set led _ _ _' 'auto auto bool' 10 10 true
  spec ' ' 'set pin' 'set pin _ _ _' 'auto auto auto' '10' 'analog' '10'
  spec ' ' 'text' 'text _ _ _ _ _' 'auto auto auto color auto' '10' '10' '10' nil '10'
  spec 'r' 'tilt' 'tilt _' 'auto' 'x'

to clear {
  '[display:mbDisplayOff]'
}

to configPage {
  return ('[data:join]' '<h1>WiFi configuration</h1>
<form action="/saveconfig">
  <label for="ssid">SSID:</label><br>
  <input type="text" name="ssid" value="' SSID '"><br><br>
  <label for="pass">Password:</label><br>
  <input type="text" name="pass" value="' password '"><br><br>
  <label for="mode">Mode AP?</label><br>
  <input type="checkbox" name="mode" value="ap"><br><br>
  <input type="submit" value="Submit">
</form>')
}

to connection {
  if (('[data:find]' 'wifi' ('file names')) == -1) {
    SSID = ('[data:join]' 'ED1-' ('[data:copyFromTo]' ('[net:myMAC]') 13 14) ('[data:copyFromTo]' ('[net:myMAC]') 16 17))
    password = '1234567890'
    mode = 'ap'
    wifiCreateHotspot SSID password
  } else {
    '[file:open]' 'wifi'
    SSID = ('[file:readLine]' 'wifi')
    password = ('[file:readLine]' 'wifi')
    modeAP = ('[file:readLine]' 'wifi')
    '[file:close]' 'wifi'
    if (modeAP == 'ap') {
      mode = 'ap'
      wifiCreateHotspot SSID password
    } else {
      wifiConnect SSID password
    }
  }
}

to 'extract credentials from path' string {
  SSID = ('[data:copyFromTo]' string (('[data:find]' 'ssid' string) + 5) (('[data:find]' 'pass' string) - 2))
  if (('[data:find]' 'mode' string) == -1) {
    password = ('[data:copyFromTo]' string (('[data:find]' 'pass' string) + 5))
    mode = ''
  } else {
    password = ('[data:copyFromTo]' string (('[data:find]' 'pass' string) + 5) (('[data:find]' 'mode' string) - 2))
    mode = ('[data:copyFromTo]' string (('[data:find]' 'mode' string) + 5))
  }
}

to 'get pin' pin 'analog or digital' {
  if ((v 'analog or digital') == 'analog') {
    return (analogReadOp pin)
  } else {
    return (digitalReadOp pin)
  }
}

to 'handle HTTP portal' {
  request = ('[net:httpServerGetRequest]')
  if (request != '') {
    local 'path' ('path of request' request)
    if (path == '/') {
      '[net:respondToHttpRequest]' '200 OK' (configPage)
    }
    if (('[data:copyFromTo]' path 1 11) == '/saveconfig') {
      'extract credentials from path' path
      savewifi SSID password mode
      'HTTP portal' = (booleanConstant false)
      '[net:respondToHttpRequest]' '200 OK' 'WiFi credentials saved! Please reset the board to connect again.'
    }
    '[net:respondToHttpRequest]' '404 Not Found' '<h1>404 Not Found</h1><p>:(</p>'
    waitMillis 10
  }
}

to 'process event' {
  local 'current event' ('[data:copyFromTo]' event 1)
  if (('ws event type' (v 'current event')) == 'connected') {
    '[display:mbDisplayOff]'
    '[tft:text]' 'Connected.' 5 5 (colorSwatch 255 255 255 255)
  } (('ws event type' (v 'current event')) == 'text message') {
    local 'msg' ('ws event payload' (v 'current event'))
    local 'message id' ('[misc:jsonGet]' msg '1')
    local 'selector' ('[misc:jsonGet]' msg '2')
    local 'params' ('[data:makeList]')
    for i ('[misc:jsonCount]' msg '3') {
      '[data:addLast]' ('[misc:jsonGet]' msg ('[data:join]' '3.' i)) params
    }
    local 'result' (callCustomReporter selector params)
    '[net:webSocketSendToClient]' ('[data:join]' '[' (v 'message id') ',' result ']') ('ws client id' (v 'current event'))
  }
}

to savewifi SSID password mode {
  '[file:delete]' 'wifi'
  '[file:open]' 'wifi'
  '[file:appendLine]' SSID 'wifi'
  '[file:appendLine]' password 'wifi'
  '[file:appendLine]' mode 'wifi'
  '[file:close]' 'wifi'
}

to sensor which {
  if (which == 'acceleration') {
    return ('[sensors:acceleration]')
  } (which == 'light') {
    return ('[display:lightLevel]')
  } else {
    return ('[sensors:temperature]')
  }
}

to 'set display' data {
  '[display:mbDisplayOff]'
  for y 5 {
    for x 5 {
      if ((at (((y - 1) * 5) + x) data) == 'X') {'[display:mbPlot]' x y}
    }
  }
}

to 'set led' x y value {
  if value {
    '[display:mbPlot]' x y
  } else {
    '[display:mbUnplot]' x y
  }
}

to 'set pin' pin 'analog or digital' value {
  if ((v 'analog or digital') == 'analog') {
    analogWriteOp pin value
  } else {
    digitalWriteOp pin value
  }
}

to showConnectionInfo {
  '[display:mbDisplayOff]'
  '[tft:text]' ('[data:join]' 'SSID: ' SSID) 0 0 16777215 1 true
  '[tft:text]' ('[data:join]' 'IP:' ('[net:myIPAddress]')) 0 10 16777215 1 true
  if (mode == 'ap') {
    '[tft:text]' ('[data:join]' 'PWD:' password) 0 20 16777215 1 true
  }
}

to text text x y clr scale {
  '[tft:text]' text x y (clr + 0) scale false
}

to tilt which {
  if (which == 'x') {
    return ('[sensors:tiltX]')
  } (which == 'y') {
    return ('[sensors:tiltY]')
  } else {
    return ('[sensors:tiltZ]')
  }
}

script 493 50 {
whenStarted
'[display:mbDisplayOff]'
'[tft:circle]' (('[tft:getWidth]') / 2) (('[tft:getHeight]') / 2) 30 255
waitMillis 1500
if (and (buttonA) (buttonB)) {
  '[tft:circle]' (('[tft:getWidth]') / 2) (('[tft:getHeight]') / 2) 30 (colorSwatch 46 255 86 255)
  '[file:delete]' 'wifi'
}
'HTTP portal' = (('[data:find]' 'wifi' ('file names')) == -1)
sendBroadcast 'go'
}

script 50 54 {
comment 'Signada: a network remote control procotol
================================

## What is it

This protocol was designed for the Citilab
ED1 board, but will work on any ESP board
with a display and two buttons, like the
M5Stack.

Its intended use is in conjunction with the
Signada Snap! library, but the protocol runs
over websockets and could be used with
other applications.

## Setup

The first time you run the project, the board
is going to create a WiFi hotspot. Look at
the screen to find out its name.

Connect to that hotspot from any device
(computer, phone, etc) and point its browser
to the board''s IP address, that should be
192.168.4.1. Make sure to not use https.

Follow the instructions on the website to set
up the board WiFi parameters according to
your local network.

If you want to modify that configuration later
on, keep buttons A and B pressed while
resetting the board and the hotspot portal
will load again.

## Usage

Load the Signada library in Snap!. Make
sure both the board and the device running
Snap! are in the same network, and use the
blocks provided by the Snap! library to
communicate with the board.'
}

script 940 56 {
whenBroadcastReceived 'go'
connection
showConnectionInfo
repeatUntil (not (v 'HTTP portal')) {
  'handle HTTP portal'
  waitMillis 50
}
'start WebSocket server'
forever {
  event = ('[net:webSocketLastEvent]')
  if (event != (booleanConstant false)) {
    sendBroadcast 'process event'
  }
  waitMillis 20
}
}

script 542 458 {
comment 'Use this script to set the Wifi credentials manually'
savewifi 'MySSID' 'MyPassword' ''
}


module 'Basic Sensors' Input
author MicroBlocks
version 1 1 
tags tilt acceleration light sensor 
choices accelerometerRange '1' '2' '4' '8' 
description 'Provides blocks to read tilt in the three axes, acceleration, temperature and light level. Many boards come with this particular set of sensors, such as the micro:bit, the Circuit Playground Express, the Calliope or the Citilab ED1.'

  spec 'r' '[sensors:tiltX]' 'tilt x'
  spec 'r' '[sensors:tiltY]' 'tilt y'
  spec 'r' '[sensors:tiltZ]' 'tilt z'
  spec 'r' '[sensors:acceleration]' 'acceleration'
  spec 'r' '[display:lightLevel]' 'light level'
  spec 'r' '[sensors:temperature]' 'temperature (Â°C)'
  spec ' ' '_setAccelRange' 'set acceleration range _ g = 100' 'menu.accelerometerRange' '1'

to '_setAccelRange' n {
  '[sensors:setAccelerometerRange]' (0 + n)
}


module 'ED1 Buttons' Input
author MicroBlocks
version 1 0 
tags button capacitive ed1 
description 'Provides blocks for the six capacitive buttons in the Citilab ED1 board.'
variables _ED1_buttons_init '_capacitive threshold' 

  spec ' ' '_ED1_buttons_init' '_ED1_buttons_init' 'any any any'
  spec 'r' 'OK button' 'button OK'
  spec 'r' 'cancel button' 'button X'
  spec 'r' 'up button' 'button up'
  spec 'r' 'down button' 'button down'
  spec 'r' 'left button' 'button left'
  spec 'r' 'right button' 'button right'
  spec ' ' 'set capacitive threshold to' 'set capacitive threshold to _' 'auto' 16

to 'OK button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 15) < (v '_capacitive threshold'))
}

to '_ED1_buttons_init' {
  if (_ED1_buttons_init == 0) {
    if ((v '_capacitive threshold') == 0) {'_capacitive threshold' = 16}
    _ED1_buttons_init = (booleanConstant true)
  }
}

to 'cancel button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 14) < (v '_capacitive threshold'))
}

to 'down button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 13) < (v '_capacitive threshold'))
}

to 'left button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 2) < (v '_capacitive threshold'))
}

to 'right button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 27) < (v '_capacitive threshold'))
}

to 'set capacitive threshold to' threshold {
  '_capacitive threshold' = threshold
}

to 'up button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 4) < (v '_capacitive threshold'))
}


module 'ED1 Stepper Motor' Output
author MicroBlocks
version 1 1 
tags '28byj-48' stepper motor fantastic ed1 
choices directions clockwise 'counter-clockwise' 
description 'Provides blocks to control 28BYJ-48 stepper motors, like the ones included in the Fantastic robot kit for the Citilab ED1 board.
'
variables _ED1_stepper_init _ED1_CW1 _ED1_CW2 _ED1_CCW1 _ED1_CCW2 _ED1_motor_running _ED1_exp_register 

  spec ' ' 'motor step' 'move motor _ _ steps _' 'auto auto menu.directions' 1 '128' 'clockwise'
  spec ' ' 'move motor ' 'move motor 1 _ and motor 2 _ _ steps' 'menu.directions menu.directions auto' 'clockwise' 'counter-clockwise' '64'
  spec ' ' 'motor angle' 'move motor _ angle _ Â°' 'auto auto' '1' '-90'
  spec ' ' 'motor turns' 'move motor _ _ complete turns' 'auto auto' '1' '3'
  spec ' ' '_ED1_stepper_init' '_ED1_stepper_init'
  spec ' ' 'stop steppers' 'stop steppers'

to '_ED1_stepper_init' {
  if (_ED1_stepper_init == 0) {
    comment '0 for ED1 V2'
    if ((i2cGet (hexToInt '20') 1) == 0) {
      _ED1_exp_register = (hexToInt '9')
    } else {
      _ED1_exp_register = (hexToInt '14')
    }
    _ED1_CW1 = (hexToInt 'C')
    _ED1_CW2 = (hexToInt '3')
    _ED1_CCW1 = (hexToInt '3')
    _ED1_CCW2 = (hexToInt 'C')
    _ED1_stepper_init = (booleanConstant true)
    i2cSet (hexToInt '20') 0 0
    i2cSet (hexToInt '20') 6 255
  }
}

to 'motor angle' 'motor number' angle {
  local 'direction' 'clockwise'
  if (angle < 0) {
    direction = 'counter-clockwise'
    angle = (angle * -1)
  }
  'motor step' (v 'motor number') ((142 * angle) / 100) direction
}

to 'motor step' 'motor number' steps direction {
  '_ED1_stepper_init'
  _ED1_motor_running = (booleanConstant true)
  repeat steps {
    if _ED1_motor_running {
      i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '9') << (((v 'motor number') % 2) << 2))
      waitMicros 1500
      if (direction == 'clockwise') {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt 'C') << (((v 'motor number') % 2) << 2))
      } else {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '3') << (((v 'motor number') % 2) << 2))
      }
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '6') << (((v 'motor number') % 2) << 2))
      waitMicros 1500
      if (direction == 'clockwise') {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '3') << (((v 'motor number') % 2) << 2))
      } else {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt 'C') << (((v 'motor number') % 2) << 2))
      }
      waitMicros 1500
    }
  }
  'stop steppers'
}

to 'motor turns' 'motor number' turns {
  local 'direction' 'clockwise'
  if (turns < 0) {
    direction = 'counter-clockwise'
    turns = (turns * -1)
  }
  'motor step' (v 'motor number') (turns * 512) direction
}

to 'move motor ' 'direction 1' 'direction 2' steps {
  '_ED1_stepper_init'
  _ED1_motor_running = (booleanConstant true)
  local 'step 1' 0
  local 'step 2' 0
  if ((v 'direction 1') == 'clockwise') {
    'step 1' = _ED1_CW1
    'step 2' = _ED1_CW2
  } else {
    'step 1' = _ED1_CCW1
    'step 2' = _ED1_CCW2
  }
  if ((v 'direction 2') == 'clockwise') {
    'step 1' = (((v 'step 1') << 4) | _ED1_CW1)
    'step 2' = (((v 'step 2') << 4) | _ED1_CW2)
  } else {
    'step 1' = (((v 'step 1') << 4) | _ED1_CCW1)
    'step 2' = (((v 'step 2') << 4) | _ED1_CCW2)
  }
  repeat steps {
    if _ED1_motor_running {
      i2cSet (hexToInt '20') _ED1_exp_register (hexToInt '99')
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register (v 'step 1')
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register (hexToInt '66')
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register (v 'step 2')
      waitMicros 1500
    }
  }
  'stop steppers'
}

to 'stop steppers' {
  i2cSet (hexToInt '20') _ED1_exp_register 0
  _ED1_motor_running = (booleanConstant false)
  waitMicros 1500
}


module Files Data
author MicroBlocks
version 1 3 
description 'Flash file system operations. Currently supports the LittleFS file system on ESP8266 and ESP32 boards. The GnuBlocks virtual machine (Linux and Raspberry Pi) supports the native system.'

  spec ' ' '[file:open]' 'open file _' 'str'
  spec ' ' '[file:close]' 'close file _' 'str'
  spec ' ' '[file:delete]' 'delete file _' 'str'
  space
  spec ' ' '[file:appendLine]' 'append line _ to file _' 'str str'
  spec ' ' '[file:appendBytes]' 'append bytes _ to file _' 'str str'
  space
  spec 'r' '[file:endOfFile]' 'end of file _' 'str'
  spec 'r' '[file:readLine]' 'next line of file _' 'str'
  spec 'r' '[file:readBytes]' 'next _ bytes of file _ : starting at _' 'num str num' 100 '' 0
  spec 'r' '[file:readInto]' 'read into _ from file _' 'str str' 'a ByteArray' ''
  space
  spec 'r' '[file:readPosition]' 'read position of file _' 'str'
  spec ' ' '[file:setReadPosition]' 'set read position _ of file _' 'num str' 0 ''
  spec ' ' 'file_SkipBytes' 'skip _ bytes of file _' 'num str' 4 ''
  space
  spec 'r' 'file names' 'file names : in directory _' 'str'
  spec 'r' '[file:fileSize]' 'size of file _' 'str'
  spec 'r' '[file:systemInfo]' 'file system info'

to 'file names' dir {
  '[file:startList]' dir
  local 'result' ('[data:makeList]')
  local 'fileName' ('[file:nextInList]')
  repeatUntil (fileName == '') {
    '[data:addLast]' fileName result
    fileName = ('[file:nextInList]')
  }
  return result
}

to file_SkipBytes offset file {
  local 'newPosition' (('[file:readPosition]' file) + offset)
  '[file:setReadPosition]' newPosition file
}


module 'HTTP server' Comm
author MicroBlocks
version 1 3 
depends WiFi 
tags http network 
description 'Create an HTTP server in MicroBlocks. You can use this library to allow remote control for your Wifi-enabled board.'

  spec 'r' '[net:httpServerGetRequest]' 'HTTP server request : binary data _ : port _' 'bool num' false 8080
  spec 'r' 'request method' 'method of request _' 'str' ''
  spec 'r' 'path of request' 'path of request _' 'str' ''
  spec 'r' 'headers of request' 'headers of request _' 'str' ''
  spec 'r' 'body of request' 'body of request _' 'str' ''
  spec 'r' 'content length of request' 'content length of request _' 'str' ''
  spec ' ' '[net:respondToHttpRequest]' 'respond _ to HTTP server request : with body _ : and headers _' 'str str str' '200 OK' 'Welcome to the MicroBlocks HTTP server' 'Content-Type: text/plain'
  spec 'r' '_endOfHeaders' '_end of headers _' 'str'
  spec 'r' '_toString' '_toString _' 'auto' 'abc'

to '_endOfHeaders' request {
  return ('[data:find]' ('[data:unicodeString]' ('[data:makeList]' 13 10 13 10)) request)
}

to '_toString' aStringOrByteArray {
  comment 'If argument is a byte array, convert it to a string. '
  if (not (isType aStringOrByteArray 'string')) {
    aStringOrByteArray = ('[data:join]' '' aStringOrByteArray)
  }
  return aStringOrByteArray
}

to 'body of request' request {
  i = ('_endOfHeaders' request)
  if (i < 0) {
    return ''
  }
  return ('[data:copyFromTo]' request (i + 4))
}

to 'content length of request' request {
  local 'i' ('_endOfHeaders' request)
  if (i < 0) {
    return 0
  }
  local 'j' ('[data:find]' 'Content-Length: ' request)
  if (j < 0) {
    comment 'Try alternate capitalization'
    j = ('[data:find]' 'Content-length: ' request)
  }
  if (or (j < 0) (j > i)) {
    return 0
  }
  j += 16
  local 'k' ('[data:find]' ('[data:unicodeString]' 13) request j)
  return (('[data:copyFromTo]' request j (k - 1)) + 0)
}

to 'headers of request' request {
  i = ('_endOfHeaders' request)
  if (i < 0) {
    return ''
  }
  return ('_toString' ('[data:copyFromTo]' request 1 (i - 1)))
}

to 'path of request' request {
  return ('_toString' ('[data:copyFromTo]' request (('[data:find]' ' ' request) + 1) (('[data:find]' ' HTTP' request) - 1)))
}

to 'request method' request {
  return ('_toString' ('[data:copyFromTo]' request 1 (('[data:find]' ' ' request) - 1)))
}


module 'JSON Primitives' Data
author MicroBlocks
version 1 0 
tags data json network 
description 'Very fast and efficient primitives to parse JSON strings.'

  spec 'r' '[misc:jsonGet]' 'json _ . _' 'str str' '{ "x": 1,  "y": [41, 42, 43] }' 'y.2'
  spec 'r' '[misc:jsonCount]' 'json count _ . _' 'str str' '[1, [4, 5, 6, 7], 3]' ''
  spec 'r' '[misc:jsonValueAt]' 'json value _ . _ at _' 'str str num' '{ "x": 1,  "y": 42 }' '' 2
  spec 'r' '[misc:jsonKeyAt]' 'json key _ . _ at _' 'str str num' '{ "x": 1,  "y": 42 }' '' 2

module 'LED Display' Output
author MicroBlocks
version 1 5 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}


module TFT Output
author MicroBlocks
version 1 5 
description 'Draw graphics and write text on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'

  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[tft:rect]' 'draw rectangle on TFT at x _ y _ width _ height _ color _ : filled _' 'num num num num color bool' 10 10 40 30 nil true
  spec ' ' '[tft:roundedRect]' 'draw rounded rectangle on TFT at x _ y _ width _ height _ radius _ color _ : filled _' 'num num num num num color bool' 10 10 40 30 8 nil true
  spec ' ' '[tft:circle]' 'draw circle on TFT at x _ y _ radius _ color _ : filled _' 'num num num color bool' 40 40 30 nil true
  spec ' ' '[tft:triangle]' 'draw triangle on TFT at x _ y _ , x _ y _ , x _ y _ color _ : filled _' 'num num num num num num color bool' 20 20 30 80 60 5 nil true
  spec ' ' '[tft:text]' 'write _ on TFT at x _ y _ color _ : scale _ wrap _' 'str num num color num bool' 'Hello World!' 5 5 nil 2 true
  spec ' ' '[tft:line]' 'draw line on TFT from x _ y _ to x _ y _ color _' 'num num num num color' 12 8 25 15
  spec ' ' '[tft:setPixel]' 'set TFT pixel x _ y _ to _' 'num num color' 10 10
  space
  spec 'r' 'makeColor' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'makeGray' 'gray _ %' 'num' 50
  spec 'r' 'randomColor' 'random color'
  space
  spec 'r' '[tft:getWidth]' 'TFT width'
  spec 'r' '[tft:getHeight]' 'TFT height'
  space
  spec ' ' '[tft:setBacklight]' 'set TFT backlight _ (0-10)' 'num' 10
  space
  spec ' ' '_deferMonochromeDisplayUpdates' '_defer monochrome display updates'
  spec ' ' '_resumeMonochromeDisplayUpdates' '_resume monochrome display updates'

to '_deferMonochromeDisplayUpdates' {
  '[tft:deferUpdates]'
}

to '_resumeMonochromeDisplayUpdates' {
  '[tft:resumeUpdates]'
}

to makeColor r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to makeGray percent {
  gray = ((percent * 255) / 100)
  gray = (maximum 0 (minimum gray 255))
  return ((gray << 16) | ((gray << 8) | gray))
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}


module Tone Output
author MicroBlocks
version 1 8 
tags tone sound music audio note speaker 
choices tone_NoteName c 'c#' d 'd#' e f 'f#' g 'g#' a 'a#' b 
description 'Audio tone generation. Make music with MicroBlocks!'
variables _tonePin _toneInitalized _toneLoopOverhead _toneNoteNames _toneArezzoNotes _toneFrequencies 

  spec ' ' 'play tone' 'play note _ octave _ for _ ms' 'str.tone_NoteName num num' 'c' 0 500
  spec ' ' 'playMIDIKey' 'play midi key _ for _ ms' 'num num' 60 500
  spec ' ' 'play frequency' 'play frequency _ for _ ms' 'num num' 261 500
  spec ' ' 'startTone' 'start tone _ Hz' 'num' 440
  spec ' ' 'stopTone' 'stop tone'
  spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
  spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
  spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
  spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
  spec ' ' '_toneLoop' '_toneLoop _ for _ ms' 'num num' 440000 100
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  local 'normalized note' ('_trimmedLowercase' note)
  if (_toneNoteNames == 0) {
    _toneNoteNames = ('[data:makeList]' 'c' 'c#' 'd' 'd#' 'e' 'f' 'f#' 'g' 'g#' 'a' 'a#' 'b' 'c_' 'db' 'd_' 'eb' 'e_' 'e#' 'f_' 'gb' 'g_' 'ab' 'a_' 'bb' 'b_' 'b#')
    _toneArezzoNotes = ('[data:makeList]' 'do' 'do#' 're' 're#' 'mi' 'fa' 'fa#' 'sol' 'sol#' 'la' 'la#' 'si' 'do_' 'dob' 're_' 'reb' 'mi_' 'mi#' 'fa_' 'solb' 'sol_' 'lab' 'la_' 'sib' 'si_' 'si#')
  }
  if (('[data:find]' (v 'normalized note') _toneArezzoNotes) > 0) {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneArezzoNotes))
  } else {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneNoteNames))
  }
}

to '_baseFreqForSemitone' semitone {
  if (_toneFrequencies == 0) {_toneFrequencies = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)}
  if (and (1 <= semitone) (semitone <= (size _toneFrequencies))) {
    return (at semitone _toneFrequencies)
  } else {
    comment 'Bad note name; return 10 Hz'
    return 10000
  }
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } ((boardType) == 'M5StickC') {
      _tonePin = 26
    } ((boardType) == 'Calliope') {
      digitalWriteOp 23 true
      digitalWriteOp 24 true
      _tonePin = 25
    } ((boardType) == 'D1-Mini') {
      _tonePin = 12
    } else {
      _tonePin = -1
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' ((key % 12) + 1))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to startTone freq {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {'[io:playTone]' _tonePin freq}
}

to stopTone {
  startTone 0
}


module 'WebSocket server' Comm
author MicroBlocks
version 1 1 
tags websockets network 
description 'Blocks to build your own (very) simple websockets server.'

  spec ' ' 'start WebSocket server' 'start WebSocket server'
  spec 'r' '[net:webSocketLastEvent]' 'last WebSocket event'
  spec 'r' 'ws client id' 'client ID for WebSocket event _' 'str' ''
  spec 'r' 'ws event payload' 'payload for WebSocket event _' 'str' ''
  spec 'r' 'ws event type' 'type of WebSocket event _' 'str' ''
  spec ' ' '[net:webSocketSendToClient]' 'send _ to WebSocket client _' 'str num' 'Hello, Client!' 0

to 'start WebSocket server' {
  if ((getIPAddress) != '0.0.0.0') {
    '[net:webSocketStart]'
  } else {
    sayIt 'Not Connected'
  }
}

to 'ws client id' event {
  if (and (isType event 'list') ((size event) > 1)) {
    return (at 2 event)
  } else {
    return ''
  }
}

to 'ws event payload' event {
  if (and (isType event 'list') ((size event) > 2)) {
    return (at 3 event)
  } else {
    return ''
  }
}

to 'ws event type' event {
  if (and (isType event 'list') ((size event) > 0)) {
    return (at ((at 1 event) + 1) ('[data:makeList]' 'error' 'disconnected' 'connected' 'text message' 'binary message' 'text fragment start' 'binary fragment start' 'fragment' 'fragment end' 'ping' 'pong' 'waiting'))
  } else {
    return ''
  }
}


module WiFi Comm
author MicroBlocks
version 1 5 
tags communication network 
description 'Connect to a WiFi network. Used in conjunction with other network libraries, such as HTTP client, HTTP server or Web Thing.
'

  spec ' ' 'wifiConnect' 'wifi connect to _ password _ : IP _ gateway _ subnet _' 'str str auto auto auto' 'Network_Name' '' '192.168.1.42' '192.168.1.1' '255.255.255.0'
  spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
  spec 'r' 'getIPAddress' 'IP address'
  spec 'r' '[net:myMAC]' 'MAC address'

to getIPAddress {
  return ('[net:myIPAddress]')
}

to wifiConnect ssid password fixedIP gatewayIP subnetIP {
  if (not ('[net:hasWiFi]')) {return}
  '[net:stopWiFi]'
  if ((pushArgCount) < 5) {
    '[net:startWiFi]' ssid password
  } else {
    '[net:startWiFi]' ssid password false fixedIP gatewayIP subnetIP
  }
  local 'startMSecs' (millisOp)
  repeatUntil (('[net:myIPAddress]') != '0.0.0.0') {
    comment 'Timeout after N seconds'
    if (((millisOp) - startMSecs) > 10000) {
      sayIt 'Could not connect'
      return 0
    }
    comment 'Slow blink while trying to connect'
    setUserLED true
    waitMillis 300
    setUserLED false
    waitMillis 300
  }
  repeat 6 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  if ('Connected' != ('[net:wifiStatus]')) {
    sayIt 'Could not create hotspot'
    return 0
  }
  repeat 6 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

